<?php

	header('Expires: Mon, 12 Dec 1982 06:14:00 GMT');
	header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');
	header('Cache-Control: no-cache, must-revalidate, max-age=0');
	header('Pragma: no-cache');

	function __errorHandler($errno=NULL, $errstr, $errfile=NULL, $errline=NULL, $errcontext=NULL){
		return;
	}

	error_reporting(E_ALL ^ E_NOTICE);
	set_error_handler('__errorHandler');

	define('kBUILD', '375');
	define('kVERSION', '2.0.2');
	define('kINSTALL_ASSET_LOCATION', './symphony/assets/installer');	
	define('kINSTALL_FILENAME', basename(__FILE__));
	
	## Show PHP Info
	if(isset($_REQUEST['info'])){
		phpinfo(); 
		exit();
	}
	
	function setLanguage() {
		require_once('symphony/lib/toolkit/class.lang.php');
		$lang = NULL;

		if(!empty($_REQUEST['lang'])){
			$l = preg_replace('/[^a-zA-Z\-]/', '', $_REQUEST['lang']);
			if(file_exists("./symphony/lib/lang/lang.{$l}.php")) $lang = $l;
		}

		if($lang === NULL){
			foreach(Lang::getBrowserLanguages() as $l){
				if(file_exists("./symphony/lib/lang/lang.{$l}.php")) $lang = $l;
				break;
			}
		}

		## none of browser accepted languages is available, get first available
		if($lang === NULL){
			## default to English
			if(file_exists('./symphony/lib/lang/lang.en.php')) $lang = 'en';
			else{
				$l = Lang::getAvailableLanguages();
				if(is_array($l) && count($l) > 0) $lang = $l[0];
			}
		}

		if($lang === NULL) return NULL;

		try{
			Lang::init('./symphony/lib/lang/lang.%s.php', $lang);
		}
		catch(Exception $s){
			return NULL;
		}

		define('__LANG__', $lang);
		return $lang;
	}

	
	/***********************
	         TESTS
	************************/

	// Check for PHP 5.1+

	if(version_compare(phpversion(), '5.1.3', '<=')){

		$code = '<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
	<head>
		<title>Outstanding Requirements</title>
		<link rel="stylesheet" type="text/css" href="'.kINSTALL_ASSET_LOCATION.'/main.css"/>
		<script type="text/javascript" src="'.kINSTALL_ASSET_LOCATION.'/main.js"></script>
	</head>
		<body>
			<h1>Install Symphony <em>Version '.kVERSION.'</em></h1>
			<h2>Outstanding Requirements</h2>
			<p>Symphony needs the following requirements satisfied before installation can proceed.</p>

			<dl>
				<dt><abbr title="PHP: Hypertext Pre-processor">PHP</abbr> 5.1.3 or above</dt>
				<dd>Symphony needs a recent version of <abbr title="PHP: Hypertext Pre-processor">PHP</abbr>.</dd>
			</dl>

		</body>

</html>';

		die($code);

	}

	// Check and set language
	if(setLanguage() === NULL){

		$code = '<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
	<head>
		<title>Outstanding Requirements</title>
		<link rel="stylesheet" type="text/css" href="'.kINSTALL_ASSET_LOCATION.'/main.css"/>
		<script type="text/javascript" src="'.kINSTALL_ASSET_LOCATION.'/main.js"></script>
	</head>
		<body>
			<h1>Install Symphony <em>Version '.kVERSION.'</em></h1>
			<h2>Outstanding Requirements</h2>
			<p>Symphony needs at least one language file to be present before installation can proceed.</p>

		</body>

</html>';

		die($code);

	}

	// Check if Symphony is already installed

	if(file_exists('manifest/config.php')){

		$code = '<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
	<head>
		<title>'.__('Existing Installation').'</title>
		<link rel="stylesheet" type="text/css" href="'.kINSTALL_ASSET_LOCATION.'/main.css"/>
		<script type="text/javascript" src="'.kINSTALL_ASSET_LOCATION.'/main.js"></script>
	</head>
		<body>
			<h1>'.__('Install Symphony <em>Version %s</em>', array(kVERSION)).'</h1>
			<h2>'.__('Existing Installation').'</h2>
			<p>'.__('It appears that Symphony has already been installed at this location.').'</p>

		</body>

</html>';

		die($code);

	}
		
	/////////////////////////
	
	function getDynamicConfiguration(){
	
		$conf = array();
	
		$conf['admin']['max_upload_size'] = '5242880';
		$conf['symphony']['pagination_maximum_rows'] = '17';
		$conf['symphony']['allow_page_subscription'] = '1';
		$conf['symphony']['lang'] = 'en';
		$conf['symphony']['version'] = '2.0.2';
		$conf['log']['archive'] = '1';
		$conf['log']['maxsize'] = '102400';
		$conf['general']['sitename'] = 'Symphony Content Management System';
		$conf['image']['cache'] = '1';
		$conf['image']['quality'] = '90';
		$conf['database']['driver'] = 'mysql';
		$conf['database']['character_set'] = 'utf8';
		$conf['database']['character_encoding'] = 'utf8';
		$conf['database']['runtime_character_set_alter'] = '1';
		$conf['database']['disable_query_caching'] = 'no';
		$conf['public']['maintenance_mode'] = 'no';
		$conf['public']['display_event_xml_in_source'] = 'yes';
		$conf['region']['time_format'] = 'H:i';
		$conf['region']['date_format'] = 'd F Y';
		$conf['maintenance_mode']['enabled'] = 'no';
	
		return $conf;
	
	}	
	
	function getTableSchema(){
		$sql = <<<SQL

		

SQL;

		return base64_decode(trim($sql));

	}

	function getWorkspaceData(){
		$sql = <<<SQL

		DQotLSAqKiogU1RSVUNUVVJFOiBgdGJsX2ZpZWxkc19hdXRob3JgICoqKg0KRFJPUCBUQUJMRSBJRiBFWElTVFMgYHRibF9maWVsZHNfYXV0aG9yYDsNCkNSRUFURSBUQUJMRSBgdGJsX2ZpZWxkc19hdXRob3JgICgKICBgaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwgYXV0b19pbmNyZW1lbnQsCiAgYGZpZWxkX2lkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMLAogIGBhbGxvd19hdXRob3JfY2hhbmdlYCBlbnVtKCd5ZXMnLCdubycpIGNvbGxhdGUgdXRmOF91bmljb2RlX2NpIE5PVCBOVUxMLAogIGBhbGxvd19tdWx0aXBsZV9zZWxlY3Rpb25gIGVudW0oJ3llcycsJ25vJykgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgTk9UIE5VTEwgZGVmYXVsdCAnbm8nLAogIFBSSU1BUlkgS0VZICAoYGlkYCksCiAgVU5JUVVFIEtFWSBgZmllbGRfaWRgIChgZmllbGRfaWRgKQopIEVOR0lORT1NeUlTQU0gQVVUT19JTkNSRU1FTlQ9NDAgREVGQVVMVCBDSEFSU0VUPXV0ZjggQ09MTEFURT11dGY4X3VuaWNvZGVfY2k7DQoNCi0tICoqKiBEQVRBOiBgdGJsX2ZpZWxkc19hdXRob3JgICoqKg0KDQotLSAqKiogU1RSVUNUVVJFOiBgdGJsX2ZpZWxkc19jaGVja2JveGAgKioqDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgdGJsX2ZpZWxkc19jaGVja2JveGA7DQpDUkVBVEUgVEFCTEUgYHRibF9maWVsZHNfY2hlY2tib3hgICgKICBgaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwgYXV0b19pbmNyZW1lbnQsCiAgYGZpZWxkX2lkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMLAogIGBkZWZhdWx0X3N0YXRlYCBlbnVtKCdvbicsJ29mZicpIGNvbGxhdGUgdXRmOF91bmljb2RlX2NpIE5PVCBOVUxMIGRlZmF1bHQgJ29uJywKICBgZGVzY3JpcHRpb25gIHZhcmNoYXIoMjU1KSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBkZWZhdWx0IE5VTEwsCiAgUFJJTUFSWSBLRVkgIChgaWRgKSwKICBLRVkgYGZpZWxkX2lkYCAoYGZpZWxkX2lkYCkKKSBFTkdJTkU9TXlJU0FNIEFVVE9fSU5DUkVNRU5UPTEzOSBERUZBVUxUIENIQVJTRVQ9dXRmOCBDT0xMQVRFPXV0ZjhfdW5pY29kZV9jaTsNCg0KLS0gKioqIERBVEE6IGB0YmxfZmllbGRzX2NoZWNrYm94YCAqKioNCklOU0VSVCBJTlRPIGB0YmxfZmllbGRzX2NoZWNrYm94YCAoYGlkYCwgYGZpZWxkX2lkYCwgYGRlZmF1bHRfc3RhdGVgLCBgZGVzY3JpcHRpb25gKSBWQUxVRVMgKDEzOCwgMzAsICdvZmYnLCAnUHVibGlzaCB0aGlzIGFydGljbGUnKTsNCklOU0VSVCBJTlRPIGB0YmxfZmllbGRzX2NoZWNrYm94YCAoYGlkYCwgYGZpZWxkX2lkYCwgYGRlZmF1bHRfc3RhdGVgLCBgZGVzY3JpcHRpb25gKSBWQUxVRVMgKDEyNiwgNDYsICdvZmYnLCAnV2Vic2l0ZSBhdXRob3InKTsNCg0KLS0gKioqIFNUUlVDVFVSRTogYHRibF9maWVsZHNfZGF0ZWAgKioqDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgdGJsX2ZpZWxkc19kYXRlYDsNCkNSRUFURSBUQUJMRSBgdGJsX2ZpZWxkc19kYXRlYCAoCiAgYGlkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMIGF1dG9faW5jcmVtZW50LAogIGBmaWVsZF9pZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCwKICBgcHJlX3BvcHVsYXRlYCBlbnVtKCd5ZXMnLCdubycpIGNvbGxhdGUgdXRmOF91bmljb2RlX2NpIE5PVCBOVUxMIGRlZmF1bHQgJ25vJywKICBgY2FsZW5kYXJgIGVudW0oJ3llcycsJ25vJykgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgTk9UIE5VTEwgZGVmYXVsdCAnbm8nLAogIFBSSU1BUlkgS0VZICAoYGlkYCksCiAgS0VZIGBmaWVsZF9pZGAgKGBmaWVsZF9pZGApCikgRU5HSU5FPU15SVNBTSBBVVRPX0lOQ1JFTUVOVD0xMjcgREVGQVVMVCBDSEFSU0VUPXV0ZjggQ09MTEFURT11dGY4X3VuaWNvZGVfY2k7DQoNCi0tICoqKiBEQVRBOiBgdGJsX2ZpZWxkc19kYXRlYCAqKioNCklOU0VSVCBJTlRPIGB0YmxfZmllbGRzX2RhdGVgIChgaWRgLCBgZmllbGRfaWRgLCBgcHJlX3BvcHVsYXRlYCwgYGNhbGVuZGFyYCkgVkFMVUVTICg5NiwgNTEsICd5ZXMnLCAnbm8nKTsNCklOU0VSVCBJTlRPIGB0YmxfZmllbGRzX2RhdGVgIChgaWRgLCBgZmllbGRfaWRgLCBgcHJlX3BvcHVsYXRlYCwgYGNhbGVuZGFyYCkgVkFMVUVTICgxMjYsIDI5LCAnbm8nLCAnbm8nKTsNCklOU0VSVCBJTlRPIGB0YmxfZmllbGRzX2RhdGVgIChgaWRgLCBgZmllbGRfaWRgLCBgcHJlX3BvcHVsYXRlYCwgYGNhbGVuZGFyYCkgVkFMVUVTICgxMTQsIDU0LCAneWVzJywgJ25vJyk7DQoNCi0tICoqKiBTVFJVQ1RVUkU6IGB0YmxfZmllbGRzX2lucHV0YCAqKioNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGB0YmxfZmllbGRzX2lucHV0YDsNCkNSRUFURSBUQUJMRSBgdGJsX2ZpZWxkc19pbnB1dGAgKAogIGBpZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCBhdXRvX2luY3JlbWVudCwKICBgZmllbGRfaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwsCiAgYHZhbGlkYXRvcmAgdmFyY2hhcigxMDApIGNvbGxhdGUgdXRmOF91bmljb2RlX2NpIGRlZmF1bHQgTlVMTCwKICBQUklNQVJZIEtFWSAgKGBpZGApLAogIEtFWSBgZmllbGRfaWRgIChgZmllbGRfaWRgKQopIEVOR0lORT1NeUlTQU0gQVVUT19JTkNSRU1FTlQ9NDU2IERFRkFVTFQgQ0hBUlNFVD11dGY4IENPTExBVEU9dXRmOF91bmljb2RlX2NpOw0KDQotLSAqKiogREFUQTogYHRibF9maWVsZHNfaW5wdXRgICoqKg0KSU5TRVJUIElOVE8gYHRibF9maWVsZHNfaW5wdXRgIChgaWRgLCBgZmllbGRfaWRgLCBgdmFsaWRhdG9yYCkgVkFMVUVTICgyMzYsIDQ3LCBOVUxMKTsNCklOU0VSVCBJTlRPIGB0YmxfZmllbGRzX2lucHV0YCAoYGlkYCwgYGZpZWxkX2lkYCwgYHZhbGlkYXRvcmApIFZBTFVFUyAoMjM3LCA0OCwgJy9eXFx3KD86XFwuP1tcXHclKy1dKykqQFxcdyg/OltcXHctXSpcXC4pKz9bYS16XXsyLH0kL2knKTsNCklOU0VSVCBJTlRPIGB0YmxfZmllbGRzX2lucHV0YCAoYGlkYCwgYGZpZWxkX2lkYCwgYHZhbGlkYXRvcmApIFZBTFVFUyAoNDU1LCAyNiwgTlVMTCk7DQpJTlNFUlQgSU5UTyBgdGJsX2ZpZWxkc19pbnB1dGAgKGBpZGAsIGBmaWVsZF9pZGAsIGB2YWxpZGF0b3JgKSBWQUxVRVMgKDM1NiwgMzEsIE5VTEwpOw0KSU5TRVJUIElOVE8gYHRibF9maWVsZHNfaW5wdXRgIChgaWRgLCBgZmllbGRfaWRgLCBgdmFsaWRhdG9yYCkgVkFMVUVTICg0NDAsIDM3LCAnL15cXHcoPzpcXC4/W1xcdyUrLV0rKSpAXFx3KD86W1xcdy1dKlxcLikrP1thLXpdezIsfSQvaScpOw0KSU5TRVJUIElOVE8gYHRibF9maWVsZHNfaW5wdXRgIChgaWRgLCBgZmllbGRfaWRgLCBgdmFsaWRhdG9yYCkgVkFMVUVTICg0MzksIDM2LCBOVUxMKTsNCklOU0VSVCBJTlRPIGB0YmxfZmllbGRzX2lucHV0YCAoYGlkYCwgYGZpZWxkX2lkYCwgYHZhbGlkYXRvcmApIFZBTFVFUyAoMjM4LCA0OSwgTlVMTCk7DQpJTlNFUlQgSU5UTyBgdGJsX2ZpZWxkc19pbnB1dGAgKGBpZGAsIGBmaWVsZF9pZGAsIGB2YWxpZGF0b3JgKSBWQUxVRVMgKDQ0MSwgMzgsICcvXlteXFxzOlxcLz8jXSs6KD86XFwvezIsM30pP1teXFxzLlxcLz8jXSsoPzpcXC5bXlxccy5cXC8/I10rKSooPzpcXC9bXlxccz8jXSpcXD8/W15cXHM/I10qKCNbXlxccyNdKik/KT8kLycpOw0KDQotLSAqKiogU1RSVUNUVVJFOiBgdGJsX2ZpZWxkc19zZWxlY3RgICoqKg0KRFJPUCBUQUJMRSBJRiBFWElTVFMgYHRibF9maWVsZHNfc2VsZWN0YDsNCkNSRUFURSBUQUJMRSBgdGJsX2ZpZWxkc19zZWxlY3RgICgKICBgaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwgYXV0b19pbmNyZW1lbnQsCiAgYGZpZWxkX2lkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMLAogIGBhbGxvd19tdWx0aXBsZV9zZWxlY3Rpb25gIGVudW0oJ3llcycsJ25vJykgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgTk9UIE5VTEwgZGVmYXVsdCAnbm8nLAogIGBzdGF0aWNfb3B0aW9uc2AgdGV4dCBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSwKICBgZHluYW1pY19vcHRpb25zYCBpbnQoMTEpIHVuc2lnbmVkIGRlZmF1bHQgTlVMTCwKICBQUklNQVJZIEtFWSAgKGBpZGApLAogIEtFWSBgZmllbGRfaWRgIChgZmllbGRfaWRgKQopIEVOR0lORT1NeUlTQU0gQVVUT19JTkNSRU1FTlQ9NjggREVGQVVMVCBDSEFSU0VUPXV0ZjggQ09MTEFURT11dGY4X3VuaWNvZGVfY2k7DQoNCi0tICoqKiBEQVRBOiBgdGJsX2ZpZWxkc19zZWxlY3RgICoqKg0KDQotLSAqKiogU1RSVUNUVVJFOiBgdGJsX2ZpZWxkc19zZWxlY3Rib3hfbGlua2AgKioqDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgdGJsX2ZpZWxkc19zZWxlY3Rib3hfbGlua2A7DQpDUkVBVEUgVEFCTEUgYHRibF9maWVsZHNfc2VsZWN0Ym94X2xpbmtgICgKICBgaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwgYXV0b19pbmNyZW1lbnQsCiAgYGZpZWxkX2lkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMLAogIGBhbGxvd19tdWx0aXBsZV9zZWxlY3Rpb25gIGVudW0oJ3llcycsJ25vJykgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgTk9UIE5VTEwgZGVmYXVsdCAnbm8nLAogIGByZWxhdGVkX2ZpZWxkX2lkYCB2YXJjaGFyKDI1NSkgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgTk9UIE5VTEwsCiAgYGxpbWl0YCBpbnQoNCkgdW5zaWduZWQgTk9UIE5VTEwgZGVmYXVsdCAnMjAnLAogIFBSSU1BUlkgS0VZICAoYGlkYCksCiAgS0VZIGBmaWVsZF9pZGAgKGBmaWVsZF9pZGApCikgRU5HSU5FPU15SVNBTSBBVVRPX0lOQ1JFTUVOVD0yMSBERUZBVUxUIENIQVJTRVQ9dXRmOCBDT0xMQVRFPXV0ZjhfdW5pY29kZV9jaTsNCg0KLS0gKioqIERBVEE6IGB0YmxfZmllbGRzX3NlbGVjdGJveF9saW5rYCAqKioNCklOU0VSVCBJTlRPIGB0YmxfZmllbGRzX3NlbGVjdGJveF9saW5rYCAoYGlkYCwgYGZpZWxkX2lkYCwgYGFsbG93X211bHRpcGxlX3NlbGVjdGlvbmAsIGByZWxhdGVkX2ZpZWxkX2lkYCwgYGxpbWl0YCkgVkFMVUVTICg4LCAzOSwgJ25vJywgMjYsIDIwKTsNCklOU0VSVCBJTlRPIGB0YmxfZmllbGRzX3NlbGVjdGJveF9saW5rYCAoYGlkYCwgYGZpZWxkX2lkYCwgYGFsbG93X211bHRpcGxlX3NlbGVjdGlvbmAsIGByZWxhdGVkX2ZpZWxkX2lkYCwgYGxpbWl0YCkgVkFMVUVTICgxNiwgNDUsICdubycsIDI2LCAyMCk7DQpJTlNFUlQgSU5UTyBgdGJsX2ZpZWxkc19zZWxlY3Rib3hfbGlua2AgKGBpZGAsIGBmaWVsZF9pZGAsIGBhbGxvd19tdWx0aXBsZV9zZWxlY3Rpb25gLCBgcmVsYXRlZF9maWVsZF9pZGAsIGBsaW1pdGApIFZBTFVFUyAoMjAsIDU2LCAnbm8nLCAzMSwgMjApOw0KDQotLSAqKiogU1RSVUNUVVJFOiBgdGJsX2ZpZWxkc190YWdsaXN0YCAqKioNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGB0YmxfZmllbGRzX3RhZ2xpc3RgOw0KQ1JFQVRFIFRBQkxFIGB0YmxfZmllbGRzX3RhZ2xpc3RgICgKICBgaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwgYXV0b19pbmNyZW1lbnQsCiAgYGZpZWxkX2lkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMLAogIGB2YWxpZGF0b3JgIHZhcmNoYXIoMTAwKSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBkZWZhdWx0IE5VTEwsCiAgYHByZV9wb3B1bGF0ZV9zb3VyY2VgIHZhcmNoYXIoMTUpIGNvbGxhdGUgdXRmOF91bmljb2RlX2NpIGRlZmF1bHQgTlVMTCwKICBQUklNQVJZIEtFWSAgKGBpZGApLAogIEtFWSBgZmllbGRfaWRgIChgZmllbGRfaWRgKSwKICBLRVkgYHByZV9wb3B1bGF0ZV9zb3VyY2VgIChgcHJlX3BvcHVsYXRlX3NvdXJjZWApCikgRU5HSU5FPU15SVNBTSBBVVRPX0lOQ1JFTUVOVD0xMzIgREVGQVVMVCBDSEFSU0VUPXV0ZjggQ09MTEFURT11dGY4X3VuaWNvZGVfY2k7DQoNCi0tICoqKiBEQVRBOiBgdGJsX2ZpZWxkc190YWdsaXN0YCAqKioNCg0KLS0gKioqIFNUUlVDVFVSRTogYHRibF9maWVsZHNfdGV4dGFyZWFgICoqKg0KRFJPUCBUQUJMRSBJRiBFWElTVFMgYHRibF9maWVsZHNfdGV4dGFyZWFgOw0KQ1JFQVRFIFRBQkxFIGB0YmxfZmllbGRzX3RleHRhcmVhYCAoCiAgYGlkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMIGF1dG9faW5jcmVtZW50LAogIGBmaWVsZF9pZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCwKICBgZm9ybWF0dGVyYCB2YXJjaGFyKDEwMCkgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgZGVmYXVsdCBOVUxMLAogIGBzaXplYCBpbnQoMykgdW5zaWduZWQgTk9UIE5VTEwsCiAgUFJJTUFSWSBLRVkgIChgaWRgKSwKICBLRVkgYGZpZWxkX2lkYCAoYGZpZWxkX2lkYCkKKSBFTkdJTkU9TXlJU0FNIEFVVE9fSU5DUkVNRU5UPTI5MyBERUZBVUxUIENIQVJTRVQ9dXRmOCBDT0xMQVRFPXV0ZjhfdW5pY29kZV9jaTsNCg0KLS0gKioqIERBVEE6IGB0YmxfZmllbGRzX3RleHRhcmVhYCAqKioNCklOU0VSVCBJTlRPIGB0YmxfZmllbGRzX3RleHRhcmVhYCAoYGlkYCwgYGZpZWxkX2lkYCwgYGZvcm1hdHRlcmAsIGBzaXplYCkgVkFMVUVTICgxOTIsIDUwLCBOVUxMLCA5KTsNCklOU0VSVCBJTlRPIGB0YmxfZmllbGRzX3RleHRhcmVhYCAoYGlkYCwgYGZpZWxkX2lkYCwgYGZvcm1hdHRlcmAsIGBzaXplYCkgVkFMVUVTICgyOTIsIDI3LCAncGJfbWFya2Rvd25leHRyYXNtYXJ0eXBhbnRzJywgMjApOw0KSU5TRVJUIElOVE8gYHRibF9maWVsZHNfdGV4dGFyZWFgIChgaWRgLCBgZmllbGRfaWRgLCBgZm9ybWF0dGVyYCwgYHNpemVgKSBWQUxVRVMgKDI1OSwgMzQsICdwYl9tYXJrZG93bmV4dHJhc21hcnR5cGFudHMnLCAxNSk7DQpJTlNFUlQgSU5UTyBgdGJsX2ZpZWxkc190ZXh0YXJlYWAgKGBpZGAsIGBmaWVsZF9pZGAsIGBmb3JtYXR0ZXJgLCBgc2l6ZWApIFZBTFVFUyAoMjM5LCAzNSwgJ3BiX21hcmtkb3duZXh0cmFzbWFydHlwYW50cycsIDUpOw0KSU5TRVJUIElOVE8gYHRibF9maWVsZHNfdGV4dGFyZWFgIChgaWRgLCBgZmllbGRfaWRgLCBgZm9ybWF0dGVyYCwgYHNpemVgKSBWQUxVRVMgKDI3OCwgNDAsICdwYl9tYXJrZG93bmV4dHJhc21hcnR5cGFudHMnLCA4KTsNCklOU0VSVCBJTlRPIGB0YmxfZmllbGRzX3RleHRhcmVhYCAoYGlkYCwgYGZpZWxkX2lkYCwgYGZvcm1hdHRlcmAsIGBzaXplYCkgVkFMVUVTICgyODYsIDQ0LCAncGJfbWFya2Rvd25leHRyYXNtYXJ0eXBhbnRzJywgOSk7DQoNCi0tICoqKiBTVFJVQ1RVUkU6IGB0YmxfZmllbGRzX3VwbG9hZGAgKioqDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgdGJsX2ZpZWxkc191cGxvYWRgOw0KQ1JFQVRFIFRBQkxFIGB0YmxfZmllbGRzX3VwbG9hZGAgKAogIGBpZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCBhdXRvX2luY3JlbWVudCwKICBgZmllbGRfaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwsCiAgYGRlc3RpbmF0aW9uYCB2YXJjaGFyKDI1NSkgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgTk9UIE5VTEwsCiAgYHZhbGlkYXRvcmAgdmFyY2hhcig1MCkgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgZGVmYXVsdCBOVUxMLAogIFBSSU1BUlkgS0VZICAoYGlkYCksCiAgS0VZIGBmaWVsZF9pZGAgKGBmaWVsZF9pZGApCikgRU5HSU5FPU15SVNBTSBBVVRPX0lOQ1JFTUVOVD0xMzkgREVGQVVMVCBDSEFSU0VUPXV0ZjggQ09MTEFURT11dGY4X3VuaWNvZGVfY2k7DQoNCi0tICoqKiBEQVRBOiBgdGJsX2ZpZWxkc191cGxvYWRgICoqKg0KSU5TRVJUIElOVE8gYHRibF9maWVsZHNfdXBsb2FkYCAoYGlkYCwgYGZpZWxkX2lkYCwgYGRlc3RpbmF0aW9uYCwgYHZhbGlkYXRvcmApIFZBTFVFUyAoMTM4LCA0MywgJy93b3Jrc3BhY2UvdXBsb2FkcycsICcvXFwuKD86Ym1wfGdpZnxqcGU/Z3xwbmcpJC9pJyk7DQoNCi0tICoqKiBTVFJVQ1RVUkU6IGB0YmxfZW50cmllc19kYXRhXzI2YCAqKioNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGB0YmxfZW50cmllc19kYXRhXzI2YDsNCkNSRUFURSBUQUJMRSBgdGJsX2VudHJpZXNfZGF0YV8yNmAgKAogIGBpZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCBhdXRvX2luY3JlbWVudCwKICBgZW50cnlfaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwsCiAgYGhhbmRsZWAgdmFyY2hhcigyNTUpIGNvbGxhdGUgdXRmOF91bmljb2RlX2NpIGRlZmF1bHQgTlVMTCwKICBgdmFsdWVgIHZhcmNoYXIoMjU1KSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBkZWZhdWx0IE5VTEwsCiAgUFJJTUFSWSBLRVkgIChgaWRgKSwKICBLRVkgYGVudHJ5X2lkYCAoYGVudHJ5X2lkYCksCiAgS0VZIGBoYW5kbGVgIChgaGFuZGxlYCksCiAgS0VZIGB2YWx1ZWAgKGB2YWx1ZWApCikgRU5HSU5FPU15SVNBTSBBVVRPX0lOQ1JFTUVOVD0xMjUgREVGQVVMVCBDSEFSU0VUPXV0ZjggQ09MTEFURT11dGY4X3VuaWNvZGVfY2k7DQoNCi0tICoqKiBEQVRBOiBgdGJsX2VudHJpZXNfZGF0YV8yNmAgKioqDQpJTlNFUlQgSU5UTyBgdGJsX2VudHJpZXNfZGF0YV8yNmAgKGBpZGAsIGBlbnRyeV9pZGAsIGBoYW5kbGVgLCBgdmFsdWVgKSBWQUxVRVMgKDEyNCwgMTEwLCAnYW4tZXhhbXBsZS1kcmFmdC1hcnRpY2xlJywgJ0FuIGV4YW1wbGUgZHJhZnQgYXJ0aWNsZScpOw0KSU5TRVJUIElOVE8gYHRibF9lbnRyaWVzX2RhdGFfMjZgIChgaWRgLCBgZW50cnlfaWRgLCBgaGFuZGxlYCwgYHZhbHVlYCkgVkFMVUVTICgxMjAsIDEwOSwgJ2EtcHJpbWVyLXRvLXN5bXBob255LTJzLWRlZmF1bHQtdGhlbWUnLCAnQSBwcmltZXIgdG8gU3ltcGhvbnkgMlwncyBkZWZhdWx0IHRoZW1lJyk7DQoNCi0tICoqKiBTVFJVQ1RVUkU6IGB0YmxfZW50cmllc19kYXRhXzI3YCAqKioNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGB0YmxfZW50cmllc19kYXRhXzI3YDsNCkNSRUFURSBUQUJMRSBgdGJsX2VudHJpZXNfZGF0YV8yN2AgKAogIGBpZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCBhdXRvX2luY3JlbWVudCwKICBgZW50cnlfaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwsCiAgYHZhbHVlYCB0ZXh0IGNvbGxhdGUgdXRmOF91bmljb2RlX2NpLAogIGB2YWx1ZV9mb3JtYXR0ZWRgIHRleHQgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2ksCiAgUFJJTUFSWSBLRVkgIChgaWRgKSwKICBLRVkgYGVudHJ5X2lkYCAoYGVudHJ5X2lkYCksCiAgRlVMTFRFWFQgS0VZIGB2YWx1ZWAgKGB2YWx1ZWApCikgRU5HSU5FPU15SVNBTSBBVVRPX0lOQ1JFTUVOVD0xMjUgREVGQVVMVCBDSEFSU0VUPXV0ZjggQ09MTEFURT11dGY4X3VuaWNvZGVfY2k7DQoNCi0tICoqKiBEQVRBOiBgdGJsX2VudHJpZXNfZGF0YV8yN2AgKioqDQpJTlNFUlQgSU5UTyBgdGJsX2VudHJpZXNfZGF0YV8yN2AgKGBpZGAsIGBlbnRyeV9pZGAsIGB2YWx1ZWAsIGB2YWx1ZV9mb3JtYXR0ZWRgKSBWQUxVRVMgKDEyNCwgMTEwLCAnVGhpcyBpcyBhbiBleGFtcGxlIGRyYWZ0IGFydGljbGUuIEZlZWwgZnJlZSB0byB0ZXN0IHRoZSBzeXN0ZW0gYnkgcHJlc3NpbmcgdGhlICpwdWJsaXNoKiBidXR0b24uJywgJzxwPlRoaXMgaXMgYW4gZXhhbXBsZSBkcmFmdCBhcnRpY2xlLiBGZWVsIGZyZWUgdG8gdGVzdCB0aGUgc3lzdGVtIGJ5IHByZXNzaW5nIHRoZSA8ZW0+cHVibGlzaDwvZW0+IGJ1dHRvbi48L3A+XG4nKTsNCklOU0VSVCBJTlRPIGB0YmxfZW50cmllc19kYXRhXzI3YCAoYGlkYCwgYGVudHJ5X2lkYCwgYHZhbHVlYCwgYHZhbHVlX2Zvcm1hdHRlZGApIFZBTFVFUyAoMTIwLCAxMDksICdFdmVyeSB0aGVtZSBpbiBTeW1waG9ueSBoYXMgYW0gaW1wb3J0YW50IG1pc3Npb246IHRvIGludHJvZHVjZSBuZXdjb21lcnMgdG8gU3ltcGhvbnkgYnkgd2F5IG9mIGEgd29ya2luZyBleGFtcGxlLiAqU3BlY3RydW0qLCB0aGUgbmFtZSBvZiB0aGlzIHZlcnNpb25cJ3MgZGVmYXVsdCB0aGVtZSwgd2FzIGRlc2lnbmVkIGFuZCBkZXZlbG9wZWQgd2l0aCBzdWNoIGEgbWlzc2lvbiBpbiBtaW5kIGJ5IGZvbGxvd2luZyBhIHNldCBvZiBjb25zdHJhaW50cy4gQSBkZWZhdWx0IHRoZW1lIGlzIHJlcXVpcmVkIHRvOlxyXG5cclxuMS4gYmUgcHJlc2VudGVkIGluIGEgZm9ybWF0IHRoYXQgaXMgdW5pdmVyc2FsbHkgaWRlbnRpZmllZCBhbmQgaW50dWl0aXZlLlxyXG4yLiBoYXZlIGEgY2xlYXIgYW5kIHNpbXBsZSBIVE1MIHN0cnVjdHVyZS5cclxuMy4gZGVtb25zdHJhdGUgdGhlIGZ1bmRhbWVudGFsIGNvbmNlcHRzIGluIFN5bXBob255IC0gYHNlY3Rpb25zYCwgYGZpZWxkc2AsIGBkYXRhIHNvdXJjZXNgIGFuZCBgZXZlbnRzYCBhbmQgdGhlaXIgaW50ZXJhY3Rpb25zIHRvZ2V0aGVyLlxyXG40LiBhdm9pZCBmdW5jdGlvbmFsaXR5IHRoYXQgZG9lcyBub3QgaGF2ZSBhbnkgZWR1Y2F0aW9uYWwgdmFsdWUuXHJcblxyXG4jIyMjIFRoZSBkZXNpZ24gIyMjI1xyXG5cclxuT3VyIGZpcnN0IHJ1bGUgc3RhdGVzIHRoYXQgYSBkZWZhdWx0IHRoZW1lIG5lZWRzIHRvIGJlIGluIGEgZm9ybWF0IHRoYXQgaXMgaW5zdGFudGx5IHJlY29nbmlzYWJsZSB0byBhIHVzZXIuIEFzIGEgcmVzdWx0LCBhbGwgb2YgdGhlIHRoZW1lcyBjcmVhdGVkIGluIFN5bXBob255XCdzIGhpc3RvcnkgaGF2ZSBlbXBoYXNpc2VkIGEgd2VibG9nIHN0cnVjdHVyZS4gKlNwZWN0cnVtKiBjb250aW51ZXMgdGhpcyB0cmFkaXRpb24uXHJcblxyXG4qQ3ViaWMqLCB0aGUgbmFtZSBvZiBhIHByZXZpb3VzIGRlZmF1bHQgdGhlbWUsIGZvbGxvd2VkIHRoZSB0ZWFjaGluZyBtYW5kYXRlIHZlcnkgY2xvc2VseS4gSG93ZXZlciwgdGhlIHRoZW1lIHRvb2sgaXQgb25lIHN0ZXAgZnVydGhlciBhbmQgcmVtb3ZlZCBjb21wbGV4IHN0cnVjdHVyZSBhbmQgY29sb3VyIGluIGZhdm91ciBvZiBhIHNpbXBsaWZpZWQgbG9vayBhbmQgZmVlbC4gVGhlIG1haW4gZGVzaWduIGdvYWwgZm9yICpTcGVjdHJ1bSogaXMgdG8gaW50cm9kdWNlIG1vcmUgY29sb3VycyBidXQgc3RpbGwgZm9sbG93IHRoZSBwaGlsb3NvcGh5IG9mIGEgc2ltcGxpc3RpYyBsYXlvdXQuXHJcblxyXG4jIyMjIEZlYXR1cmVzICMjIyNcclxuXHJcbipTcGVjdHJ1bSogaGFzIGEgaGFuZGZ1bCBvZiBhZGRpdGlvbmFsIGZlYXR1cmVzIHRoYXQgeW91IHdvblwndCBmaW5kIGluIHByZXZpb3VzIGRlZmF1bHQgdGhlbWVzLiBUaGVzZSBuZXcgZmVhdHVyZXMgYXJlIG5vdCBvbmx5IG1lYW50IHRvIGRlbW9uc3RyYXRlIHRoZSBjYXBhYmlsaXRpZXMgb2YgdGhlIHN5c3RlbSBidXQgYWxzbyBleHBsYWluIHNvbWUgZnVuZGFtZW50YWwgcGhpbG9zb3BoaWVzIGluIFN5bXBob255IDIuIEJlbG93IGlzIGEgbGlzdCBvZiBmZWF0dXJlczpcclxuXHJcbi0gTG9nZ2VkIGluIHVzZXJzIHdpbGwgc2VlIExpbmtzIHRvIFN5bXBob255XCdzIGFkbWluIHRvIGVkaXQgYXJ0aWNsZXMsIG1hbmFnZSBjb21tZW50cyBhbmQgYWRkIG5vdGVzLlxyXG4tIExvZ2dlZCBpbiB1c2VycyB3aWxsIHNlZSAzIHByb3RlY3RlZCBtZW51IGl0ZW1zLCBhcnRpY2xlIGRyYWZ0cywgdGhlIGRlYnVnIHBhZ2UgYW5kIGEgbGluayB0byB0aGUgU3ltcGhvbnkgYWRtaW4uXHJcbi0gV2Vic2l0ZSBhdXRob3JzIHdobyBoYXZlIGFjY2VzcyB0byB0aGUgYWRtaW4gY2FuIG1ha2UgdGhlaXIgY29tbWVudHMgXCJhdXRob3Jpc2VkXCIgd2hpY2ggd2lsbCBjb2xvdXIgdGhlaXIgY29tbWVudCBkaWZmZXJlbnQgdG8gb3RoZXJzLlxyXG4tIEFydGljbGVzIG9uIHRoZSBkcmFmdHMgcGFnZSBzcG9ydHMgYSBidXR0b24gdG8gcHVibGlzaCB0aGUgYXJ0aWNsZS5cclxuLSBBcnRpY2xlIGltYWdlcyB0YWtlIGFkdmFudGFnZSBvZiBTeW1waG9ueVwncyBidWlsZC1pbiBpbWFnZSBtYW5pcHVsYXRpb24gZmVhdHVyZSB0byBjcm9wIGFuZCBzaXplIHRoZSBpbWFnZSBhdXRvbWF0aWNhbGx5LlxyXG4tIFRoZSBjb250YWN0IGZvcm0gb24gdGhlIGFib3V0IHBhZ2Ugc2F2ZXMgdGhlIGNvbnRlbnQgdG8gdGhlIE1lc3NhZ2VzIHNlY3Rpb24gb24gdGhlIGJhY2tlbmQgYW5kIGVtYWlscyB0aGUgd2Vic2l0ZVwncyBvd25lci5cclxuXHJcbiMjIyMgUGhpbG9zb3BoeSAjIyMjXHJcblxyXG5BbGwgb2YgdGhlIGFib3ZlIHRha2VzIGFkdmFudGFnZSBvZiBuZXcgZmVhdHVyZXMgZm91bmQgaW4gdmVyc2lvbiAyLiBBbiBpbXBvcnRhbnQgY29uY2VwdCB0aGF0IGlzIGJlaW5nIGFkdm9jYXRlZCBpbiBTeW1waG9ueSBpcyB0aGUgcHJhY3Rpc2Ugb2YgY3JlYXRpbmcgYSB0aWdodGVyIGNvbm5lY3Rpb24gYmV0d2VlbiB0aGUgZnJvbnQtZW5kIGFuZCB0aGUgYmFja2VuZC4gRGV2ZWxvcGVycyBhcmUgZW5jb3VyYWdlZCB0byB0YWtlIGFkdmFudGFnZSBvZiB0aGUgc2ltcGxpZmllZCBVUkwgc3RydWN0dXJlIG9mIHRoZSBhZG1pbiB0byBjcmVhdGUgYSBtb3JlIGNvbnZlbmllbnQgZW52aXJvbm1lbnQgZm9yIHRoZWlyIHVzZXJzLlxyXG5cclxuV2l0aCB0aGUgaW50cm9kdWN0aW9uIG9mIHRoZSBFdmVudCBlZGl0b3IsIGRldmVsb3BlcnMgbm93IGhhdmUgZXZlbiBtb3JlIGNvbnRyb2wgd2hlbiBkZXZlbG9waW5nIGEgd2Vic2l0ZS4gRm9yIGV4YW1wbGUsIHRoZSAqUHVibGlzaCogYnV0dG9uIG9uIHRoZSBbYXJ0aWNsZSBkcmFmdHMgcGFnZV0oZHJhZnRzLykgdXRpbGlzZXMgdGhlIGV2ZW50IGVkaXRvciB0byBjcmVhdGUgYW4gaW50ZXJhY3Rpb24gYmV0d2VlbiB0aGUgZnJvbnRlbmQgYW5kIHRoZSBiYWNrZW5kLiBUaGlzIGFsbG93cyB0aGUgKlB1Ymxpc2gqIGJ1dHRvbiB0byB1cGRhdGUgdGhlIFwiUHVibGlzaCB0aGlzIGFydGljbGVcIiBjaGVja2JveCBmaWVsZCBmcm9tIHRoZSBcIkFydGljbGVzXCIgc2VjdGlvbi4gVGhpcyBmZWF0dXJlIGFsc28gY29tcGxpbWVudHMgYW5kIGVuY291cmFnZXMgdGhlIHBoaWxvc29waHkgb2YgYSBtb3JlIHNlYW1sZXNzIGVudmlyb25tZW50IGJldHdlZW4gdGhlIHdlYnNpdGUgYW5kIHRoZSBhZG1pbiBpbnRlcmZhY2UuJywgJzxwPkV2ZXJ5IHRoZW1lIGluIFN5bXBob255IGhhcyBhbSBpbXBvcnRhbnQgbWlzc2lvbjogdG8gaW50cm9kdWNlIG5ld2NvbWVycyB0byBTeW1waG9ueSBieSB3YXkgb2YgYSB3b3JraW5nIGV4YW1wbGUuIDxlbT5TcGVjdHJ1bTwvZW0+LCB0aGUgbmFtZSBvZiB0aGlzIHZlcnNpb24mIzgyMTc7cyBkZWZhdWx0IHRoZW1lLCB3YXMgZGVzaWduZWQgYW5kIGRldmVsb3BlZCB3aXRoIHN1Y2ggYSBtaXNzaW9uIGluIG1pbmQgYnkgZm9sbG93aW5nIGEgc2V0IG9mIGNvbnN0cmFpbnRzLiBBIGRlZmF1bHQgdGhlbWUgaXMgcmVxdWlyZWQgdG86PC9wPlxuXG48b2w+XG48bGk+YmUgcHJlc2VudGVkIGluIGEgZm9ybWF0IHRoYXQgaXMgdW5pdmVyc2FsbHkgaWRlbnRpZmllZCBhbmQgaW50dWl0aXZlLjwvbGk+XG48bGk+aGF2ZSBhIGNsZWFyIGFuZCBzaW1wbGUgSFRNTCBzdHJ1Y3R1cmUuPC9saT5cbjxsaT5kZW1vbnN0cmF0ZSB0aGUgZnVuZGFtZW50YWwgY29uY2VwdHMgaW4gU3ltcGhvbnkgLSA8Y29kZT5zZWN0aW9uczwvY29kZT4sIDxjb2RlPmZpZWxkczwvY29kZT4sIDxjb2RlPmRhdGEgc291cmNlczwvY29kZT4gYW5kIDxjb2RlPmV2ZW50czwvY29kZT4gYW5kIHRoZWlyIGludGVyYWN0aW9ucyB0b2dldGhlci48L2xpPlxuPGxpPmF2b2lkIGZ1bmN0aW9uYWxpdHkgdGhhdCBkb2VzIG5vdCBoYXZlIGFueSBlZHVjYXRpb25hbCB2YWx1ZS48L2xpPlxuPC9vbD5cblxuPGg0PlRoZSBkZXNpZ248L2g0PlxuXG48cD5PdXIgZmlyc3QgcnVsZSBzdGF0ZXMgdGhhdCBhIGRlZmF1bHQgdGhlbWUgbmVlZHMgdG8gYmUgaW4gYSBmb3JtYXQgdGhhdCBpcyBpbnN0YW50bHkgcmVjb2duaXNhYmxlIHRvIGEgdXNlci4gQXMgYSByZXN1bHQsIGFsbCBvZiB0aGUgdGhlbWVzIGNyZWF0ZWQgaW4gU3ltcGhvbnkmIzgyMTc7cyBoaXN0b3J5IGhhdmUgZW1waGFzaXNlZCBhIHdlYmxvZyBzdHJ1Y3R1cmUuIDxlbT5TcGVjdHJ1bTwvZW0+IGNvbnRpbnVlcyB0aGlzIHRyYWRpdGlvbi48L3A+XG5cbjxwPjxlbT5DdWJpYzwvZW0+LCB0aGUgbmFtZSBvZiBhIHByZXZpb3VzIGRlZmF1bHQgdGhlbWUsIGZvbGxvd2VkIHRoZSB0ZWFjaGluZyBtYW5kYXRlIHZlcnkgY2xvc2VseS4gSG93ZXZlciwgdGhlIHRoZW1lIHRvb2sgaXQgb25lIHN0ZXAgZnVydGhlciBhbmQgcmVtb3ZlZCBjb21wbGV4IHN0cnVjdHVyZSBhbmQgY29sb3VyIGluIGZhdm91ciBvZiBhIHNpbXBsaWZpZWQgbG9vayBhbmQgZmVlbC4gVGhlIG1haW4gZGVzaWduIGdvYWwgZm9yIDxlbT5TcGVjdHJ1bTwvZW0+IGlzIHRvIGludHJvZHVjZSBtb3JlIGNvbG91cnMgYnV0IHN0aWxsIGZvbGxvdyB0aGUgcGhpbG9zb3BoeSBvZiBhIHNpbXBsaXN0aWMgbGF5b3V0LjwvcD5cblxuPGg0PkZlYXR1cmVzPC9oND5cblxuPHA+PGVtPlNwZWN0cnVtPC9lbT4gaGFzIGEgaGFuZGZ1bCBvZiBhZGRpdGlvbmFsIGZlYXR1cmVzIHRoYXQgeW91IHdvbiYjODIxNzt0IGZpbmQgaW4gcHJldmlvdXMgZGVmYXVsdCB0aGVtZXMuIFRoZXNlIG5ldyBmZWF0dXJlcyBhcmUgbm90IG9ubHkgbWVhbnQgdG8gZGVtb25zdHJhdGUgdGhlIGNhcGFiaWxpdGllcyBvZiB0aGUgc3lzdGVtIGJ1dCBhbHNvIGV4cGxhaW4gc29tZSBmdW5kYW1lbnRhbCBwaGlsb3NvcGhpZXMgaW4gU3ltcGhvbnkgMi4gQmVsb3cgaXMgYSBsaXN0IG9mIGZlYXR1cmVzOjwvcD5cblxuPHVsPlxuPGxpPkxvZ2dlZCBpbiB1c2VycyB3aWxsIHNlZSBMaW5rcyB0byBTeW1waG9ueSYjODIxNztzIGFkbWluIHRvIGVkaXQgYXJ0aWNsZXMsIG1hbmFnZSBjb21tZW50cyBhbmQgYWRkIG5vdGVzLjwvbGk+XG48bGk+TG9nZ2VkIGluIHVzZXJzIHdpbGwgc2VlIDMgcHJvdGVjdGVkIG1lbnUgaXRlbXMsIGFydGljbGUgZHJhZnRzLCB0aGUgZGVidWcgcGFnZSBhbmQgYSBsaW5rIHRvIHRoZSBTeW1waG9ueSBhZG1pbi48L2xpPlxuPGxpPldlYnNpdGUgYXV0aG9ycyB3aG8gaGF2ZSBhY2Nlc3MgdG8gdGhlIGFkbWluIGNhbiBtYWtlIHRoZWlyIGNvbW1lbnRzICYjODIyMDthdXRob3Jpc2VkJiM4MjIxOyB3aGljaCB3aWxsIGNvbG91ciB0aGVpciBjb21tZW50IGRpZmZlcmVudCB0byBvdGhlcnMuPC9saT5cbjxsaT5BcnRpY2xlcyBvbiB0aGUgZHJhZnRzIHBhZ2Ugc3BvcnRzIGEgYnV0dG9uIHRvIHB1Ymxpc2ggdGhlIGFydGljbGUuPC9saT5cbjxsaT5BcnRpY2xlIGltYWdlcyB0YWtlIGFkdmFudGFnZSBvZiBTeW1waG9ueSYjODIxNztzIGJ1aWxkLWluIGltYWdlIG1hbmlwdWxhdGlvbiBmZWF0dXJlIHRvIGNyb3AgYW5kIHNpemUgdGhlIGltYWdlIGF1dG9tYXRpY2FsbHkuPC9saT5cbjxsaT5UaGUgY29udGFjdCBmb3JtIG9uIHRoZSBhYm91dCBwYWdlIHNhdmVzIHRoZSBjb250ZW50IHRvIHRoZSBNZXNzYWdlcyBzZWN0aW9uIG9uIHRoZSBiYWNrZW5kIGFuZCBlbWFpbHMgdGhlIHdlYnNpdGUmIzgyMTc7cyBvd25lci48L2xpPlxuPC91bD5cblxuPGg0PlBoaWxvc29waHk8L2g0PlxuXG48cD5BbGwgb2YgdGhlIGFib3ZlIHRha2VzIGFkdmFudGFnZSBvZiBuZXcgZmVhdHVyZXMgZm91bmQgaW4gdmVyc2lvbiAyLiBBbiBpbXBvcnRhbnQgY29uY2VwdCB0aGF0IGlzIGJlaW5nIGFkdm9jYXRlZCBpbiBTeW1waG9ueSBpcyB0aGUgcHJhY3Rpc2Ugb2YgY3JlYXRpbmcgYSB0aWdodGVyIGNvbm5lY3Rpb24gYmV0d2VlbiB0aGUgZnJvbnQtZW5kIGFuZCB0aGUgYmFja2VuZC4gRGV2ZWxvcGVycyBhcmUgZW5jb3VyYWdlZCB0byB0YWtlIGFkdmFudGFnZSBvZiB0aGUgc2ltcGxpZmllZCBVUkwgc3RydWN0dXJlIG9mIHRoZSBhZG1pbiB0byBjcmVhdGUgYSBtb3JlIGNvbnZlbmllbnQgZW52aXJvbm1lbnQgZm9yIHRoZWlyIHVzZXJzLjwvcD5cblxuPHA+V2l0aCB0aGUgaW50cm9kdWN0aW9uIG9mIHRoZSBFdmVudCBlZGl0b3IsIGRldmVsb3BlcnMgbm93IGhhdmUgZXZlbiBtb3JlIGNvbnRyb2wgd2hlbiBkZXZlbG9waW5nIGEgd2Vic2l0ZS4gRm9yIGV4YW1wbGUsIHRoZSA8ZW0+UHVibGlzaDwvZW0+IGJ1dHRvbiBvbiB0aGUgPGEgaHJlZj1cImRyYWZ0cy9cIj5hcnRpY2xlIGRyYWZ0cyBwYWdlPC9hPiB1dGlsaXNlcyB0aGUgZXZlbnQgZWRpdG9yIHRvIGNyZWF0ZSBhbiBpbnRlcmFjdGlvbiBiZXR3ZWVuIHRoZSBmcm9udGVuZCBhbmQgdGhlIGJhY2tlbmQuIFRoaXMgYWxsb3dzIHRoZSA8ZW0+UHVibGlzaDwvZW0+IGJ1dHRvbiB0byB1cGRhdGUgdGhlICYjODIyMDtQdWJsaXNoIHRoaXMgYXJ0aWNsZSYjODIyMTsgY2hlY2tib3ggZmllbGQgZnJvbSB0aGUgJiM4MjIwO0FydGljbGVzJiM4MjIxOyBzZWN0aW9uLiBUaGlzIGZlYXR1cmUgYWxzbyBjb21wbGltZW50cyBhbmQgZW5jb3VyYWdlcyB0aGUgcGhpbG9zb3BoeSBvZiBhIG1vcmUgc2VhbWxlc3MgZW52aXJvbm1lbnQgYmV0d2VlbiB0aGUgd2Vic2l0ZSBhbmQgdGhlIGFkbWluIGludGVyZmFjZS48L3A+XG4nKTsNCg0KLS0gKioqIFNUUlVDVFVSRTogYHRibF9lbnRyaWVzX2RhdGFfMjlgICoqKg0KRFJPUCBUQUJMRSBJRiBFWElTVFMgYHRibF9lbnRyaWVzX2RhdGFfMjlgOw0KQ1JFQVRFIFRBQkxFIGB0YmxfZW50cmllc19kYXRhXzI5YCAoCiAgYGlkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMIGF1dG9faW5jcmVtZW50LAogIGBlbnRyeV9pZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCwKICBgdmFsdWVgIHZhcmNoYXIoODApIGNvbGxhdGUgdXRmOF91bmljb2RlX2NpIGRlZmF1bHQgTlVMTCwKICBgbG9jYWxgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwsCiAgYGdtdGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCwKICBQUklNQVJZIEtFWSAgKGBpZGApLAogIEtFWSBgZW50cnlfaWRgIChgZW50cnlfaWRgKSwKICBLRVkgYHZhbHVlYCAoYHZhbHVlYCkKKSBFTkdJTkU9TXlJU0FNIEFVVE9fSU5DUkVNRU5UPTEyNSBERUZBVUxUIENIQVJTRVQ9dXRmOCBDT0xMQVRFPXV0ZjhfdW5pY29kZV9jaTsNCg0KLS0gKioqIERBVEE6IGB0YmxfZW50cmllc19kYXRhXzI5YCAqKioNCklOU0VSVCBJTlRPIGB0YmxfZW50cmllc19kYXRhXzI5YCAoYGlkYCwgYGVudHJ5X2lkYCwgYHZhbHVlYCwgYGxvY2FsYCwgYGdtdGApIFZBTFVFUyAoMTI0LCAxMTAsICcyMDA5LTEyLTA4VDIxOjAwOjAwKzEwOjAwJywgMTI2MDI3MDAwMCwgMTI2MDI3MDAwMCk7DQpJTlNFUlQgSU5UTyBgdGJsX2VudHJpZXNfZGF0YV8yOWAgKGBpZGAsIGBlbnRyeV9pZGAsIGB2YWx1ZWAsIGBsb2NhbGAsIGBnbXRgKSBWQUxVRVMgKDEyMCwgMTA5LCAnMjAwOS0xMi0wOFQxMDowMDowMCsxMDowMCcsIDEyNjAyMzA0MDAsIDEyNjAyMzA0MDApOw0KDQotLSAqKiogU1RSVUNUVVJFOiBgdGJsX2VudHJpZXNfZGF0YV8zMGAgKioqDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgdGJsX2VudHJpZXNfZGF0YV8zMGA7DQpDUkVBVEUgVEFCTEUgYHRibF9lbnRyaWVzX2RhdGFfMzBgICgKICBgaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwgYXV0b19pbmNyZW1lbnQsCiAgYGVudHJ5X2lkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMLAogIGB2YWx1ZWAgZW51bSgneWVzJywnbm8nKSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBOT1QgTlVMTCBkZWZhdWx0ICdubycsCiAgUFJJTUFSWSBLRVkgIChgaWRgKSwKICBLRVkgYGVudHJ5X2lkYCAoYGVudHJ5X2lkYCksCiAgS0VZIGB2YWx1ZWAgKGB2YWx1ZWApCikgRU5HSU5FPU15SVNBTSBBVVRPX0lOQ1JFTUVOVD0xMjUgREVGQVVMVCBDSEFSU0VUPXV0ZjggQ09MTEFURT11dGY4X3VuaWNvZGVfY2k7DQoNCi0tICoqKiBEQVRBOiBgdGJsX2VudHJpZXNfZGF0YV8zMGAgKioqDQpJTlNFUlQgSU5UTyBgdGJsX2VudHJpZXNfZGF0YV8zMGAgKGBpZGAsIGBlbnRyeV9pZGAsIGB2YWx1ZWApIFZBTFVFUyAoMTI0LCAxMTAsICdubycpOw0KSU5TRVJUIElOVE8gYHRibF9lbnRyaWVzX2RhdGFfMzBgIChgaWRgLCBgZW50cnlfaWRgLCBgdmFsdWVgKSBWQUxVRVMgKDEyMCwgMTA5LCAneWVzJyk7DQoNCi0tICoqKiBTVFJVQ1RVUkU6IGB0YmxfZW50cmllc19kYXRhXzMxYCAqKioNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGB0YmxfZW50cmllc19kYXRhXzMxYDsNCkNSRUFURSBUQUJMRSBgdGJsX2VudHJpZXNfZGF0YV8zMWAgKAogIGBpZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCBhdXRvX2luY3JlbWVudCwKICBgZW50cnlfaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwsCiAgYGhhbmRsZWAgdmFyY2hhcigyNTUpIGNvbGxhdGUgdXRmOF91bmljb2RlX2NpIGRlZmF1bHQgTlVMTCwKICBgdmFsdWVgIHZhcmNoYXIoMjU1KSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBkZWZhdWx0IE5VTEwsCiAgUFJJTUFSWSBLRVkgIChgaWRgKSwKICBLRVkgYGVudHJ5X2lkYCAoYGVudHJ5X2lkYCksCiAgS0VZIGBoYW5kbGVgIChgaGFuZGxlYCksCiAgS0VZIGB2YWx1ZWAgKGB2YWx1ZWApCikgRU5HSU5FPU15SVNBTSBBVVRPX0lOQ1JFTUVOVD0xOSBERUZBVUxUIENIQVJTRVQ9dXRmOCBDT0xMQVRFPXV0ZjhfdW5pY29kZV9jaTsNCg0KLS0gKioqIERBVEE6IGB0YmxfZW50cmllc19kYXRhXzMxYCAqKioNCklOU0VSVCBJTlRPIGB0YmxfZW50cmllc19kYXRhXzMxYCAoYGlkYCwgYGVudHJ5X2lkYCwgYGhhbmRsZWAsIGB2YWx1ZWApIFZBTFVFUyAoMSwgMTUsICdzeW1waG9ueScsICdTeW1waG9ueScpOw0KSU5TRVJUIElOVE8gYHRibF9lbnRyaWVzX2RhdGFfMzFgIChgaWRgLCBgZW50cnlfaWRgLCBgaGFuZGxlYCwgYHZhbHVlYCkgVkFMVUVTICgyLCAxNiwgJ2VudGVydGFpbm1lbnQnLCAnRW50ZXJ0YWlubWVudCcpOw0KSU5TRVJUIElOVE8gYHRibF9lbnRyaWVzX2RhdGFfMzFgIChgaWRgLCBgZW50cnlfaWRgLCBgaGFuZGxlYCwgYHZhbHVlYCkgVkFMVUVTICgzLCAxNywgJ2ZpcmVmbHknLCAnRmlyZWZseScpOw0KSU5TRVJUIElOVE8gYHRibF9lbnRyaWVzX2RhdGFfMzFgIChgaWRgLCBgZW50cnlfaWRgLCBgaGFuZGxlYCwgYHZhbHVlYCkgVkFMVUVTICgxOCwgMjAsICdoZWFsdGgnLCAnSGVhbHRoJyk7DQoNCi0tICoqKiBTVFJVQ1RVUkU6IGB0YmxfZW50cmllc19kYXRhXzM0YCAqKioNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGB0YmxfZW50cmllc19kYXRhXzM0YDsNCkNSRUFURSBUQUJMRSBgdGJsX2VudHJpZXNfZGF0YV8zNGAgKAogIGBpZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCBhdXRvX2luY3JlbWVudCwKICBgZW50cnlfaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwsCiAgYHZhbHVlYCB0ZXh0IGNvbGxhdGUgdXRmOF91bmljb2RlX2NpLAogIGB2YWx1ZV9mb3JtYXR0ZWRgIHRleHQgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2ksCiAgUFJJTUFSWSBLRVkgIChgaWRgKSwKICBLRVkgYGVudHJ5X2lkYCAoYGVudHJ5X2lkYCksCiAgRlVMTFRFWFQgS0VZIGB2YWx1ZWAgKGB2YWx1ZWApCikgRU5HSU5FPU15SVNBTSBBVVRPX0lOQ1JFTUVOVD0yMiBERUZBVUxUIENIQVJTRVQ9dXRmOCBDT0xMQVRFPXV0ZjhfdW5pY29kZV9jaTsNCg0KLS0gKioqIERBVEE6IGB0YmxfZW50cmllc19kYXRhXzM0YCAqKioNCklOU0VSVCBJTlRPIGB0YmxfZW50cmllc19kYXRhXzM0YCAoYGlkYCwgYGVudHJ5X2lkYCwgYHZhbHVlYCwgYHZhbHVlX2Zvcm1hdHRlZGApIFZBTFVFUyAoMjEsIDExMiwgJ1tPdmVydHVyZV0oaHR0cDovL292ZXJ0dXJlMjEuY29tKSBpcyBTeW1waG9ueVwncyBvZmZpY2lhbCBjb21tdW5pdHkgd2Vic2l0ZS4nLCAnPHA+PGEgaHJlZj1cImh0dHA6Ly9vdmVydHVyZTIxLmNvbVwiPk92ZXJ0dXJlPC9hPiBpcyBTeW1waG9ueSYjODIxNztzIG9mZmljaWFsIGNvbW11bml0eSB3ZWJzaXRlLjwvcD5cbicpOw0KSU5TRVJUIElOVE8gYHRibF9lbnRyaWVzX2RhdGFfMzRgIChgaWRgLCBgZW50cnlfaWRgLCBgdmFsdWVgLCBgdmFsdWVfZm9ybWF0dGVkYCkgVkFMVUVTICgxNiwgMTE0LCAnRHJvcCBpbiBhbmQgaGF2ZSBhIGNoYXQgd2l0aCB0aGUgU3ltcGhvbnkgZGV2ZWxvcGVycyBvdmVyIGF0IGlyYy5mcmVlbm9kZS5uZXQgb24gI3N5bXBob255LiBZb3VcJ2xsIG5lZWQgYW4gW0lSQyBDbGllbnRdKGh0dHA6Ly93d3cuZ29vZ2xlLmNvbS9zZWFyY2g/cT1JUkMrQ2xpZW50KScsICc8cD5Ecm9wIGluIGFuZCBoYXZlIGEgY2hhdCB3aXRoIHRoZSBTeW1waG9ueSBkZXZlbG9wZXJzIG92ZXIgYXQgaXJjLmZyZWVub2RlLm5ldCBvbiAjc3ltcGhvbnkuIFlvdSYjODIxNztsbCBuZWVkIGFuIDxhIGhyZWY9XCJodHRwOi8vd3d3Lmdvb2dsZS5jb20vc2VhcmNoP3E9SVJDK0NsaWVudFwiPklSQyBDbGllbnQ8L2E+PC9wPlxuJyk7DQpJTlNFUlQgSU5UTyBgdGJsX2VudHJpZXNfZGF0YV8zNGAgKGBpZGAsIGBlbnRyeV9pZGAsIGB2YWx1ZWAsIGB2YWx1ZV9mb3JtYXR0ZWRgKSBWQUxVRVMgKDE4LCAxMTEsICdTeW1waG9ueSB0b29rIG92ZXIgMTggbW9udGhzIHRvIGRldmVsb3AuJywgJzxwPlN5bXBob255IHRvb2sgb3ZlciAxOCBtb250aHMgdG8gZGV2ZWxvcC48L3A+XG4nKTsNCg0KLS0gKioqIFNUUlVDVFVSRTogYHRibF9lbnRyaWVzX2RhdGFfMzVgICoqKg0KRFJPUCBUQUJMRSBJRiBFWElTVFMgYHRibF9lbnRyaWVzX2RhdGFfMzVgOw0KQ1JFQVRFIFRBQkxFIGB0YmxfZW50cmllc19kYXRhXzM1YCAoCiAgYGlkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMIGF1dG9faW5jcmVtZW50LAogIGBlbnRyeV9pZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCwKICBgdmFsdWVgIHRleHQgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2ksCiAgYHZhbHVlX2Zvcm1hdHRlZGAgdGV4dCBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSwKICBQUklNQVJZIEtFWSAgKGBpZGApLAogIEtFWSBgZW50cnlfaWRgIChgZW50cnlfaWRgKSwKICBGVUxMVEVYVCBLRVkgYHZhbHVlYCAoYHZhbHVlYCkKKSBFTkdJTkU9TXlJU0FNIEFVVE9fSU5DUkVNRU5UPTE5IERFRkFVTFQgQ0hBUlNFVD11dGY4IENPTExBVEU9dXRmOF91bmljb2RlX2NpOw0KDQotLSAqKiogREFUQTogYHRibF9lbnRyaWVzX2RhdGFfMzVgICoqKg0KSU5TRVJUIElOVE8gYHRibF9lbnRyaWVzX2RhdGFfMzVgIChgaWRgLCBgZW50cnlfaWRgLCBgdmFsdWVgLCBgdmFsdWVfZm9ybWF0dGVkYCkgVkFMVUVTICgxLCAxNSwgJ0Egd2lzZSB3b21hbiBzYWlkIHRvIG1lIG9uY2UsIFwiSWYgeW91XCdyZSBub3QgdXNpbmcgU3ltcGhvbnkgdG8gcHVibGlzaCB5b3VyIGNvbnRlbnQgb24gdGhlIHdlYiwgdGhlbiB5b3VcJ3JlIGp1c3QgYSB3aWxkIGNoaXBtdW5rLiBHZXQgd2l0aCB0aGUgdGltZXMgYW5kIGhlbHAgbWUgbWlsayB0aGlzIGNvdy5cIicsICc8cD5BIHdpc2Ugd29tYW4gc2FpZCB0byBtZSBvbmNlLCAmIzgyMjA7SWYgeW91JiM4MjE3O3JlIG5vdCB1c2luZyBTeW1waG9ueSB0byBwdWJsaXNoIHlvdXIgY29udGVudCBvbiB0aGUgd2ViLCB0aGVuIHlvdSYjODIxNztyZSBqdXN0IGEgd2lsZCBjaGlwbXVuay4gR2V0IHdpdGggdGhlIHRpbWVzIGFuZCBoZWxwIG1lIG1pbGsgdGhpcyBjb3cuJiM4MjIxOzwvcD5cbicpOw0KSU5TRVJUIElOVE8gYHRibF9lbnRyaWVzX2RhdGFfMzVgIChgaWRgLCBgZW50cnlfaWRgLCBgdmFsdWVgLCBgdmFsdWVfZm9ybWF0dGVkYCkgVkFMVUVTICgyLCAxNiwgJ0V2ZXJ5ZGF5LCA4IGhvdXJzIG9mIG9uZVwncyBsaWZlIGlzIHRha2VuIHVwIGJ5IHNsZWVwLCA4IHdpdGggd29yayBhbmQgYW5vdGhlciA0IHRvIHByb2NyYXN0aW5hdGlvbi4gVGhlIHJlbWFpbmluZyA0IGhvdXJzIGlzIGEgcHJlY2lvdXMgb25lLiBVc2UgaXQgZm9yIGVudGVydGFpbm1lbnQuJywgJzxwPkV2ZXJ5ZGF5LCA4IGhvdXJzIG9mIG9uZSYjODIxNztzIGxpZmUgaXMgdGFrZW4gdXAgYnkgc2xlZXAsIDggd2l0aCB3b3JrIGFuZCBhbm90aGVyIDQgdG8gcHJvY3Jhc3RpbmF0aW9uLiBUaGUgcmVtYWluaW5nIDQgaG91cnMgaXMgYSBwcmVjaW91cyBvbmUuIFVzZSBpdCBmb3IgZW50ZXJ0YWlubWVudC48L3A+XG4nKTsNCklOU0VSVCBJTlRPIGB0YmxfZW50cmllc19kYXRhXzM1YCAoYGlkYCwgYGVudHJ5X2lkYCwgYHZhbHVlYCwgYHZhbHVlX2Zvcm1hdHRlZGApIFZBTFVFUyAoMywgMTcsICdUaGlzIGlzIG15IHNuZWFreSB3YXkgb2YgYWR2ZXJ0aXNpbmcgdGhlIGJlc3QgdGVsZXZpc2lvbiBzaG93IGV2ZXIuIFdhdGNoIGl0IGZvciB0aGUgZnVubnkuJywgJzxwPlRoaXMgaXMgbXkgc25lYWt5IHdheSBvZiBhZHZlcnRpc2luZyB0aGUgYmVzdCB0ZWxldmlzaW9uIHNob3cgZXZlci4gV2F0Y2ggaXQgZm9yIHRoZSBmdW5ueS48L3A+XG4nKTsNCklOU0VSVCBJTlRPIGB0YmxfZW50cmllc19kYXRhXzM1YCAoYGlkYCwgYGVudHJ5X2lkYCwgYHZhbHVlYCwgYHZhbHVlX2Zvcm1hdHRlZGApIFZBTFVFUyAoMTgsIDIwLCAnVHdvIHRoaW5ncyB0aGF0IGFyZSBpbiBmYXNoaW9uIHRvZGF5OiBoZWFsdGggYW5kIGNsaW1hdGUgaXNzdWVzLiBUaGUga2lkcyBhcmUgcmF2aW5nIGFib3V0IGdvb2QgaGVhbHRoIHRoZXNlIGRheXMuIEFwcGFyZW50bHkgaXRcJ3MgYSBwb3NpdGl2ZSB0aGluZy4nLCAnPHA+VHdvIHRoaW5ncyB0aGF0IGFyZSBpbiBmYXNoaW9uIHRvZGF5OiBoZWFsdGggYW5kIGNsaW1hdGUgaXNzdWVzLiBUaGUga2lkcyBhcmUgcmF2aW5nIGFib3V0IGdvb2QgaGVhbHRoIHRoZXNlIGRheXMuIEFwcGFyZW50bHkgaXQmIzgyMTc7cyBhIHBvc2l0aXZlIHRoaW5nLjwvcD5cbicpOw0KDQotLSAqKiogU1RSVUNUVVJFOiBgdGJsX2VudHJpZXNfZGF0YV8zNmAgKioqDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgdGJsX2VudHJpZXNfZGF0YV8zNmA7DQpDUkVBVEUgVEFCTEUgYHRibF9lbnRyaWVzX2RhdGFfMzZgICgKICBgaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwgYXV0b19pbmNyZW1lbnQsCiAgYGVudHJ5X2lkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMLAogIGBoYW5kbGVgIHZhcmNoYXIoMjU1KSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBkZWZhdWx0IE5VTEwsCiAgYHZhbHVlYCB2YXJjaGFyKDI1NSkgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgZGVmYXVsdCBOVUxMLAogIFBSSU1BUlkgS0VZICAoYGlkYCksCiAgS0VZIGBlbnRyeV9pZGAgKGBlbnRyeV9pZGApLAogIEtFWSBgaGFuZGxlYCAoYGhhbmRsZWApLAogIEtFWSBgdmFsdWVgIChgdmFsdWVgKQopIEVOR0lORT1NeUlTQU0gQVVUT19JTkNSRU1FTlQ9MzkgREVGQVVMVCBDSEFSU0VUPXV0ZjggQ09MTEFURT11dGY4X3VuaWNvZGVfY2k7DQoNCi0tICoqKiBEQVRBOiBgdGJsX2VudHJpZXNfZGF0YV8zNmAgKioqDQoNCi0tICoqKiBTVFJVQ1RVUkU6IGB0YmxfZW50cmllc19kYXRhXzM3YCAqKioNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGB0YmxfZW50cmllc19kYXRhXzM3YDsNCkNSRUFURSBUQUJMRSBgdGJsX2VudHJpZXNfZGF0YV8zN2AgKAogIGBpZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCBhdXRvX2luY3JlbWVudCwKICBgZW50cnlfaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwsCiAgYGhhbmRsZWAgdmFyY2hhcigyNTUpIGNvbGxhdGUgdXRmOF91bmljb2RlX2NpIGRlZmF1bHQgTlVMTCwKICBgdmFsdWVgIHZhcmNoYXIoMjU1KSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBkZWZhdWx0IE5VTEwsCiAgUFJJTUFSWSBLRVkgIChgaWRgKSwKICBLRVkgYGVudHJ5X2lkYCAoYGVudHJ5X2lkYCksCiAgS0VZIGBoYW5kbGVgIChgaGFuZGxlYCksCiAgS0VZIGB2YWx1ZWAgKGB2YWx1ZWApCikgRU5HSU5FPU15SVNBTSBBVVRPX0lOQ1JFTUVOVD0zNSBERUZBVUxUIENIQVJTRVQ9dXRmOCBDT0xMQVRFPXV0ZjhfdW5pY29kZV9jaTsNCg0KLS0gKioqIERBVEE6IGB0YmxfZW50cmllc19kYXRhXzM3YCAqKioNCg0KLS0gKioqIFNUUlVDVFVSRTogYHRibF9lbnRyaWVzX2RhdGFfMzhgICoqKg0KRFJPUCBUQUJMRSBJRiBFWElTVFMgYHRibF9lbnRyaWVzX2RhdGFfMzhgOw0KQ1JFQVRFIFRBQkxFIGB0YmxfZW50cmllc19kYXRhXzM4YCAoCiAgYGlkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMIGF1dG9faW5jcmVtZW50LAogIGBlbnRyeV9pZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCwKICBgaGFuZGxlYCB2YXJjaGFyKDI1NSkgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgZGVmYXVsdCBOVUxMLAogIGB2YWx1ZWAgdmFyY2hhcigyNTUpIGNvbGxhdGUgdXRmOF91bmljb2RlX2NpIGRlZmF1bHQgTlVMTCwKICBQUklNQVJZIEtFWSAgKGBpZGApLAogIEtFWSBgZW50cnlfaWRgIChgZW50cnlfaWRgKSwKICBLRVkgYGhhbmRsZWAgKGBoYW5kbGVgKSwKICBLRVkgYHZhbHVlYCAoYHZhbHVlYCkKKSBFTkdJTkU9TXlJU0FNIEFVVE9fSU5DUkVNRU5UPTE3IERFRkFVTFQgQ0hBUlNFVD11dGY4IENPTExBVEU9dXRmOF91bmljb2RlX2NpOw0KDQotLSAqKiogREFUQTogYHRibF9lbnRyaWVzX2RhdGFfMzhgICoqKg0KDQotLSAqKiogU1RSVUNUVVJFOiBgdGJsX2VudHJpZXNfZGF0YV8zOWAgKioqDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgdGJsX2VudHJpZXNfZGF0YV8zOWA7DQpDUkVBVEUgVEFCTEUgYHRibF9lbnRyaWVzX2RhdGFfMzlgICgKICBgaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwgYXV0b19pbmNyZW1lbnQsCiAgYGVudHJ5X2lkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMLAogIGByZWxhdGlvbl9pZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCwKICBQUklNQVJZIEtFWSAgKGBpZGApLAogIEtFWSBgZW50cnlfaWRgIChgZW50cnlfaWRgKSwKICBLRVkgYHJlbGF0aW9uX2lkYCAoYHJlbGF0aW9uX2lkYCkKKSBFTkdJTkU9TXlJU0FNIEFVVE9fSU5DUkVNRU5UPTkwIERFRkFVTFQgQ0hBUlNFVD11dGY4IENPTExBVEU9dXRmOF91bmljb2RlX2NpOw0KDQotLSAqKiogREFUQTogYHRibF9lbnRyaWVzX2RhdGFfMzlgICoqKg0KDQotLSAqKiogU1RSVUNUVVJFOiBgdGJsX2VudHJpZXNfZGF0YV80MGAgKioqDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgdGJsX2VudHJpZXNfZGF0YV80MGA7DQpDUkVBVEUgVEFCTEUgYHRibF9lbnRyaWVzX2RhdGFfNDBgICgKICBgaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwgYXV0b19pbmNyZW1lbnQsCiAgYGVudHJ5X2lkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMLAogIGB2YWx1ZWAgdGV4dCBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSwKICBgdmFsdWVfZm9ybWF0dGVkYCB0ZXh0IGNvbGxhdGUgdXRmOF91bmljb2RlX2NpLAogIFBSSU1BUlkgS0VZICAoYGlkYCksCiAgS0VZIGBlbnRyeV9pZGAgKGBlbnRyeV9pZGApLAogIEZVTExURVhUIEtFWSBgdmFsdWVgIChgdmFsdWVgKQopIEVOR0lORT1NeUlTQU0gQVVUT19JTkNSRU1FTlQ9MzUgREVGQVVMVCBDSEFSU0VUPXV0ZjggQ09MTEFURT11dGY4X3VuaWNvZGVfY2k7DQoNCi0tICoqKiBEQVRBOiBgdGJsX2VudHJpZXNfZGF0YV80MGAgKioqDQoNCi0tICoqKiBTVFJVQ1RVUkU6IGB0YmxfZW50cmllc19kYXRhXzQzYCAqKioNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGB0YmxfZW50cmllc19kYXRhXzQzYDsNCkNSRUFURSBUQUJMRSBgdGJsX2VudHJpZXNfZGF0YV80M2AgKAogIGBpZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCBhdXRvX2luY3JlbWVudCwKICBgZW50cnlfaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwsCiAgYGZpbGVgIHZhcmNoYXIoMjU1KSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBkZWZhdWx0IE5VTEwsCiAgYHNpemVgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwsCiAgYG1pbWV0eXBlYCB2YXJjaGFyKDUwKSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBOT1QgTlVMTCwKICBgbWV0YWAgdmFyY2hhcigyNTUpIGNvbGxhdGUgdXRmOF91bmljb2RlX2NpIGRlZmF1bHQgTlVMTCwKICBQUklNQVJZIEtFWSAgKGBpZGApLAogIEtFWSBgZW50cnlfaWRgIChgZW50cnlfaWRgKSwKICBLRVkgYGZpbGVgIChgZmlsZWApLAogIEtFWSBgbWltZXR5cGVgIChgbWltZXR5cGVgKQopIEVOR0lORT1NeUlTQU0gQVVUT19JTkNSRU1FTlQ9NTkgREVGQVVMVCBDSEFSU0VUPXV0ZjggQ09MTEFURT11dGY4X3VuaWNvZGVfY2k7DQoNCi0tICoqKiBEQVRBOiBgdGJsX2VudHJpZXNfZGF0YV80M2AgKioqDQoNCi0tICoqKiBTVFJVQ1RVUkU6IGB0YmxfZW50cmllc19kYXRhXzQ0YCAqKioNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGB0YmxfZW50cmllc19kYXRhXzQ0YDsNCkNSRUFURSBUQUJMRSBgdGJsX2VudHJpZXNfZGF0YV80NGAgKAogIGBpZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCBhdXRvX2luY3JlbWVudCwKICBgZW50cnlfaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwsCiAgYHZhbHVlYCB0ZXh0IGNvbGxhdGUgdXRmOF91bmljb2RlX2NpLAogIGB2YWx1ZV9mb3JtYXR0ZWRgIHRleHQgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2ksCiAgUFJJTUFSWSBLRVkgIChgaWRgKSwKICBLRVkgYGVudHJ5X2lkYCAoYGVudHJ5X2lkYCksCiAgRlVMTFRFWFQgS0VZIGB2YWx1ZWAgKGB2YWx1ZWApCikgRU5HSU5FPU15SVNBTSBBVVRPX0lOQ1JFTUVOVD02MyBERUZBVUxUIENIQVJTRVQ9dXRmOCBDT0xMQVRFPXV0ZjhfdW5pY29kZV9jaTsNCg0KLS0gKioqIERBVEE6IGB0YmxfZW50cmllc19kYXRhXzQ0YCAqKioNCg0KLS0gKioqIFNUUlVDVFVSRTogYHRibF9lbnRyaWVzX2RhdGFfNDVgICoqKg0KRFJPUCBUQUJMRSBJRiBFWElTVFMgYHRibF9lbnRyaWVzX2RhdGFfNDVgOw0KQ1JFQVRFIFRBQkxFIGB0YmxfZW50cmllc19kYXRhXzQ1YCAoCiAgYGlkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMIGF1dG9faW5jcmVtZW50LAogIGBlbnRyeV9pZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCwKICBgcmVsYXRpb25faWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwsCiAgUFJJTUFSWSBLRVkgIChgaWRgKSwKICBLRVkgYGVudHJ5X2lkYCAoYGVudHJ5X2lkYCksCiAgS0VZIGByZWxhdGlvbl9pZGAgKGByZWxhdGlvbl9pZGApCikgRU5HSU5FPU15SVNBTSBBVVRPX0lOQ1JFTUVOVD02MyBERUZBVUxUIENIQVJTRVQ9dXRmOCBDT0xMQVRFPXV0ZjhfdW5pY29kZV9jaTsNCg0KLS0gKioqIERBVEE6IGB0YmxfZW50cmllc19kYXRhXzQ1YCAqKioNCg0KLS0gKioqIFNUUlVDVFVSRTogYHRibF9lbnRyaWVzX2RhdGFfNDZgICoqKg0KRFJPUCBUQUJMRSBJRiBFWElTVFMgYHRibF9lbnRyaWVzX2RhdGFfNDZgOw0KQ1JFQVRFIFRBQkxFIGB0YmxfZW50cmllc19kYXRhXzQ2YCAoCiAgYGlkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMIGF1dG9faW5jcmVtZW50LAogIGBlbnRyeV9pZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCwKICBgdmFsdWVgIGVudW0oJ3llcycsJ25vJykgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgTk9UIE5VTEwgZGVmYXVsdCAnbm8nLAogIFBSSU1BUlkgS0VZICAoYGlkYCksCiAgS0VZIGBlbnRyeV9pZGAgKGBlbnRyeV9pZGApLAogIEtFWSBgdmFsdWVgIChgdmFsdWVgKQopIEVOR0lORT1NeUlTQU0gQVVUT19JTkNSRU1FTlQ9NjggREVGQVVMVCBDSEFSU0VUPXV0ZjggQ09MTEFURT11dGY4X3VuaWNvZGVfY2k7DQoNCi0tICoqKiBEQVRBOiBgdGJsX2VudHJpZXNfZGF0YV80NmAgKioqDQoNCi0tICoqKiBTVFJVQ1RVUkU6IGB0YmxfZW50cmllc19kYXRhXzQ3YCAqKioNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGB0YmxfZW50cmllc19kYXRhXzQ3YDsNCkNSRUFURSBUQUJMRSBgdGJsX2VudHJpZXNfZGF0YV80N2AgKAogIGBpZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCBhdXRvX2luY3JlbWVudCwKICBgZW50cnlfaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwsCiAgYGhhbmRsZWAgdmFyY2hhcigyNTUpIGNvbGxhdGUgdXRmOF91bmljb2RlX2NpIGRlZmF1bHQgTlVMTCwKICBgdmFsdWVgIHZhcmNoYXIoMjU1KSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBkZWZhdWx0IE5VTEwsCiAgUFJJTUFSWSBLRVkgIChgaWRgKSwKICBLRVkgYGVudHJ5X2lkYCAoYGVudHJ5X2lkYCksCiAgS0VZIGBoYW5kbGVgIChgaGFuZGxlYCksCiAgS0VZIGB2YWx1ZWAgKGB2YWx1ZWApCikgRU5HSU5FPU15SVNBTSBBVVRPX0lOQ1JFTUVOVD00NSBERUZBVUxUIENIQVJTRVQ9dXRmOCBDT0xMQVRFPXV0ZjhfdW5pY29kZV9jaTsNCg0KLS0gKioqIERBVEE6IGB0YmxfZW50cmllc19kYXRhXzQ3YCAqKioNCklOU0VSVCBJTlRPIGB0YmxfZW50cmllc19kYXRhXzQ3YCAoYGlkYCwgYGVudHJ5X2lkYCwgYGhhbmRsZWAsIGB2YWx1ZWApIFZBTFVFUyAoNDIsIDEwNSwgJ2FsbGVuLWNoYW5nJywgJ0FsbGVuIENoYW5nJyk7DQoNCi0tICoqKiBTVFJVQ1RVUkU6IGB0YmxfZW50cmllc19kYXRhXzQ4YCAqKioNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGB0YmxfZW50cmllc19kYXRhXzQ4YDsNCkNSRUFURSBUQUJMRSBgdGJsX2VudHJpZXNfZGF0YV80OGAgKAogIGBpZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCBhdXRvX2luY3JlbWVudCwKICBgZW50cnlfaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwsCiAgYGhhbmRsZWAgdmFyY2hhcigyNTUpIGNvbGxhdGUgdXRmOF91bmljb2RlX2NpIGRlZmF1bHQgTlVMTCwKICBgdmFsdWVgIHZhcmNoYXIoMjU1KSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBkZWZhdWx0IE5VTEwsCiAgUFJJTUFSWSBLRVkgIChgaWRgKSwKICBLRVkgYGVudHJ5X2lkYCAoYGVudHJ5X2lkYCksCiAgS0VZIGBoYW5kbGVgIChgaGFuZGxlYCksCiAgS0VZIGB2YWx1ZWAgKGB2YWx1ZWApCikgRU5HSU5FPU15SVNBTSBBVVRPX0lOQ1JFTUVOVD00NSBERUZBVUxUIENIQVJTRVQ9dXRmOCBDT0xMQVRFPXV0ZjhfdW5pY29kZV9jaTsNCg0KLS0gKioqIERBVEE6IGB0YmxfZW50cmllc19kYXRhXzQ4YCAqKioNCklOU0VSVCBJTlRPIGB0YmxfZW50cmllc19kYXRhXzQ4YCAoYGlkYCwgYGVudHJ5X2lkYCwgYGhhbmRsZWAsIGB2YWx1ZWApIFZBTFVFUyAoNDIsIDEwNSwgJ2FsbGVuLWNoYW90aWNwYXR0ZXJuY29tJywgJ2FsbGVuQGNoYW90aWNwYXR0ZXJuLmNvbScpOw0KDQotLSAqKiogU1RSVUNUVVJFOiBgdGJsX2VudHJpZXNfZGF0YV80OWAgKioqDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgdGJsX2VudHJpZXNfZGF0YV80OWA7DQpDUkVBVEUgVEFCTEUgYHRibF9lbnRyaWVzX2RhdGFfNDlgICgKICBgaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwgYXV0b19pbmNyZW1lbnQsCiAgYGVudHJ5X2lkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMLAogIGBoYW5kbGVgIHZhcmNoYXIoMjU1KSBjb2xsYXRlIHV0ZjhfdW5pY29kZV9jaSBkZWZhdWx0IE5VTEwsCiAgYHZhbHVlYCB2YXJjaGFyKDI1NSkgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgZGVmYXVsdCBOVUxMLAogIFBSSU1BUlkgS0VZICAoYGlkYCksCiAgS0VZIGBlbnRyeV9pZGAgKGBlbnRyeV9pZGApLAogIEtFWSBgaGFuZGxlYCAoYGhhbmRsZWApLAogIEtFWSBgdmFsdWVgIChgdmFsdWVgKQopIEVOR0lORT1NeUlTQU0gQVVUT19JTkNSRU1FTlQ9NDQgREVGQVVMVCBDSEFSU0VUPXV0ZjggQ09MTEFURT11dGY4X3VuaWNvZGVfY2k7DQoNCi0tICoqKiBEQVRBOiBgdGJsX2VudHJpZXNfZGF0YV80OWAgKioqDQpJTlNFUlQgSU5UTyBgdGJsX2VudHJpZXNfZGF0YV80OWAgKGBpZGAsIGBlbnRyeV9pZGAsIGBoYW5kbGVgLCBgdmFsdWVgKSBWQUxVRVMgKDQxLCAxMDUsICdnZW5lcmFsLWVucXVpcnknLCAnR2VuZXJhbCBFbnF1aXJ5Jyk7DQoNCi0tICoqKiBTVFJVQ1RVUkU6IGB0YmxfZW50cmllc19kYXRhXzUwYCAqKioNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGB0YmxfZW50cmllc19kYXRhXzUwYDsNCkNSRUFURSBUQUJMRSBgdGJsX2VudHJpZXNfZGF0YV81MGAgKAogIGBpZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCBhdXRvX2luY3JlbWVudCwKICBgZW50cnlfaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwsCiAgYHZhbHVlYCB0ZXh0IGNvbGxhdGUgdXRmOF91bmljb2RlX2NpLAogIGB2YWx1ZV9mb3JtYXR0ZWRgIHRleHQgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2ksCiAgUFJJTUFSWSBLRVkgIChgaWRgKSwKICBLRVkgYGVudHJ5X2lkYCAoYGVudHJ5X2lkYCksCiAgRlVMTFRFWFQgS0VZIGB2YWx1ZWAgKGB2YWx1ZWApCikgRU5HSU5FPU15SVNBTSBBVVRPX0lOQ1JFTUVOVD00NSBERUZBVUxUIENIQVJTRVQ9dXRmOCBDT0xMQVRFPXV0ZjhfdW5pY29kZV9jaTsNCg0KLS0gKioqIERBVEE6IGB0YmxfZW50cmllc19kYXRhXzUwYCAqKioNCklOU0VSVCBJTlRPIGB0YmxfZW50cmllc19kYXRhXzUwYCAoYGlkYCwgYGVudHJ5X2lkYCwgYHZhbHVlYCwgYHZhbHVlX2Zvcm1hdHRlZGApIFZBTFVFUyAoNDIsIDEwNSwgJ1RoaXMgaXMgYSB0ZXN0IG1lc3NhZ2UgdG8gdGhlIGd1eXMgaW4gQXplcm90aC4nLCAnVGhpcyBpcyBhIHRlc3QgbWVzc2FnZSB0byB0aGUgZ3V5cyBpbiBBemVyb3RoLicpOw0KDQotLSAqKiogU1RSVUNUVVJFOiBgdGJsX2VudHJpZXNfZGF0YV81MWAgKioqDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgdGJsX2VudHJpZXNfZGF0YV81MWA7DQpDUkVBVEUgVEFCTEUgYHRibF9lbnRyaWVzX2RhdGFfNTFgICgKICBgaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwgYXV0b19pbmNyZW1lbnQsCiAgYGVudHJ5X2lkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMLAogIGB2YWx1ZWAgdmFyY2hhcig4MCkgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgZGVmYXVsdCBOVUxMLAogIGBsb2NhbGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCwKICBgZ210YCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMLAogIFBSSU1BUlkgS0VZICAoYGlkYCksCiAgS0VZIGBlbnRyeV9pZGAgKGBlbnRyeV9pZGApLAogIEtFWSBgdmFsdWVgIChgdmFsdWVgKQopIEVOR0lORT1NeUlTQU0gQVVUT19JTkNSRU1FTlQ9MTIgREVGQVVMVCBDSEFSU0VUPXV0ZjggQ09MTEFURT11dGY4X3VuaWNvZGVfY2k7DQoNCi0tICoqKiBEQVRBOiBgdGJsX2VudHJpZXNfZGF0YV81MWAgKioqDQpJTlNFUlQgSU5UTyBgdGJsX2VudHJpZXNfZGF0YV81MWAgKGBpZGAsIGBlbnRyeV9pZGAsIGB2YWx1ZWAsIGBsb2NhbGAsIGBnbXRgKSBWQUxVRVMgKDExLCAxMTIsICcyMDA4LTEyLTA4VDExOjAwOjAwKzEwOjAwJywgMTIyODY5ODAwMCwgMTIyODY5ODAwMCk7DQpJTlNFUlQgSU5UTyBgdGJsX2VudHJpZXNfZGF0YV81MWAgKGBpZGAsIGBlbnRyeV9pZGAsIGB2YWx1ZWAsIGBsb2NhbGAsIGBnbXRgKSBWQUxVRVMgKDgsIDExMSwgJzIwMDgtMTItMDhUMDk6MDA6MDArMTA6MDAnLCAxMjI4NjkwODAwLCAxMjI4NjkwODAwKTsNCklOU0VSVCBJTlRPIGB0YmxfZW50cmllc19kYXRhXzUxYCAoYGlkYCwgYGVudHJ5X2lkYCwgYHZhbHVlYCwgYGxvY2FsYCwgYGdtdGApIFZBTFVFUyAoNiwgMTE0LCAnMjAwOC0xMi0wOFQxMDowMDowMCsxMDowMCcsIDEyMjg2OTQ0MDAsIDEyMjg2OTQ0MDApOw0KDQotLSAqKiogU1RSVUNUVVJFOiBgdGJsX2VudHJpZXNfZGF0YV81NGAgKioqDQpEUk9QIFRBQkxFIElGIEVYSVNUUyBgdGJsX2VudHJpZXNfZGF0YV81NGA7DQpDUkVBVEUgVEFCTEUgYHRibF9lbnRyaWVzX2RhdGFfNTRgICgKICBgaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwgYXV0b19pbmNyZW1lbnQsCiAgYGVudHJ5X2lkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMLAogIGB2YWx1ZWAgdmFyY2hhcig4MCkgY29sbGF0ZSB1dGY4X3VuaWNvZGVfY2kgZGVmYXVsdCBOVUxMLAogIGBsb2NhbGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCwKICBgZ210YCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMLAogIFBSSU1BUlkgS0VZICAoYGlkYCksCiAgS0VZIGBlbnRyeV9pZGAgKGBlbnRyeV9pZGApLAogIEtFWSBgdmFsdWVgIChgdmFsdWVgKQopIEVOR0lORT1NeUlTQU0gQVVUT19JTkNSRU1FTlQ9NDIgREVGQVVMVCBDSEFSU0VUPXV0ZjggQ09MTEFURT11dGY4X3VuaWNvZGVfY2k7DQoNCi0tICoqKiBEQVRBOiBgdGJsX2VudHJpZXNfZGF0YV81NGAgKioqDQoNCi0tICoqKiBTVFJVQ1RVUkU6IGB0YmxfZW50cmllc19kYXRhXzU2YCAqKioNCkRST1AgVEFCTEUgSUYgRVhJU1RTIGB0YmxfZW50cmllc19kYXRhXzU2YDsNCkNSRUFURSBUQUJMRSBgdGJsX2VudHJpZXNfZGF0YV81NmAgKAogIGBpZGAgaW50KDExKSB1bnNpZ25lZCBOT1QgTlVMTCBhdXRvX2luY3JlbWVudCwKICBgZW50cnlfaWRgIGludCgxMSkgdW5zaWduZWQgTk9UIE5VTEwsCiAgYHJlbGF0aW9uX2lkYCBpbnQoMTEpIHVuc2lnbmVkIE5PVCBOVUxMLAogIFBSSU1BUlkgS0VZICAoYGlkYCksCiAgS0VZIGBlbnRyeV9pZGAgKGBlbnRyeV9pZGApLAogIEtFWSBgcmVsYXRpb25faWRgIChgcmVsYXRpb25faWRgKQopIEVOR0lORT1NeUlTQU0gQVVUT19JTkNSRU1FTlQ9MjQgREVGQVVMVCBDSEFSU0VUPXV0ZjggQ09MTEFURT11dGY4X3VuaWNvZGVfY2k7DQoNCi0tICoqKiBEQVRBOiBgdGJsX2VudHJpZXNfZGF0YV81NmAgKioqDQpJTlNFUlQgSU5UTyBgdGJsX2VudHJpZXNfZGF0YV81NmAgKGBpZGAsIGBlbnRyeV9pZGAsIGByZWxhdGlvbl9pZGApIFZBTFVFUyAoMTksIDEwOSwgMTYpOw0KSU5TRVJUIElOVE8gYHRibF9lbnRyaWVzX2RhdGFfNTZgIChgaWRgLCBgZW50cnlfaWRgLCBgcmVsYXRpb25faWRgKSBWQUxVRVMgKDIzLCAxMTAsIDE1KTsNCg0KLS0gKioqIERBVEE6IGB0YmxfZW50cmllc2AgKioqDQpJTlNFUlQgSU5UTyBgdGJsX2VudHJpZXNgIChgaWRgLCBgc2VjdGlvbl9pZGAsIGBhdXRob3JfaWRgLCBgY3JlYXRpb25fZGF0ZWAsIGBjcmVhdGlvbl9kYXRlX2dtdGApIFZBTFVFUyAoMjAsIDcsIDMsICcyMDA4LTAxLTE2IDExOjI2OjM1JywgJzIwMDgtMDEtMTYgMDE6MjY6MzUnKTsNCklOU0VSVCBJTlRPIGB0YmxfZW50cmllc2AgKGBpZGAsIGBzZWN0aW9uX2lkYCwgYGF1dGhvcl9pZGAsIGBjcmVhdGlvbl9kYXRlYCwgYGNyZWF0aW9uX2RhdGVfZ210YCkgVkFMVUVTICgxNywgNywgMywgJzIwMDgtMDEtMTYgMTE6MDU6MTUnLCAnMjAwOC0wMS0xNiAwMTowNToxNScpOw0KSU5TRVJUIElOVE8gYHRibF9lbnRyaWVzYCAoYGlkYCwgYHNlY3Rpb25faWRgLCBgYXV0aG9yX2lkYCwgYGNyZWF0aW9uX2RhdGVgLCBgY3JlYXRpb25fZGF0ZV9nbXRgKSBWQUxVRVMgKDE2LCA3LCAzLCAnMjAwOC0wMS0xNiAxMDo1NTo1NScsICcyMDA4LTAxLTE2IDAwOjU1OjU1Jyk7DQpJTlNFUlQgSU5UTyBgdGJsX2VudHJpZXNgIChgaWRgLCBgc2VjdGlvbl9pZGAsIGBhdXRob3JfaWRgLCBgY3JlYXRpb25fZGF0ZWAsIGBjcmVhdGlvbl9kYXRlX2dtdGApIFZBTFVFUyAoMTEyLCA4LCAzLCAnMjAwOC0wMS0yMiAxNTo0OTozMicsICcyMDA4LTAxLTIyIDA1OjQ5OjMyJyk7DQpJTlNFUlQgSU5UTyBgdGJsX2VudHJpZXNgIChgaWRgLCBgc2VjdGlvbl9pZGAsIGBhdXRob3JfaWRgLCBgY3JlYXRpb25fZGF0ZWAsIGBjcmVhdGlvbl9kYXRlX2dtdGApIFZBTFVFUyAoMTUsIDcsIDMsICcyMDA4LTAxLTE2IDEwOjUyOjU1JywgJzIwMDgtMDEtMTYgMDA6NTI6NTUnKTsNCklOU0VSVCBJTlRPIGB0YmxfZW50cmllc2AgKGBpZGAsIGBzZWN0aW9uX2lkYCwgYGF1dGhvcl9pZGAsIGBjcmVhdGlvbl9kYXRlYCwgYGNyZWF0aW9uX2RhdGVfZ210YCkgVkFMVUVTICgxMTEsIDgsIDMsICcyMDA4LTAxLTIyIDE1OjQ3OjM1JywgJzIwMDgtMDEtMjIgMDU6NDc6MzUnKTsNCklOU0VSVCBJTlRPIGB0YmxfZW50cmllc2AgKGBpZGAsIGBzZWN0aW9uX2lkYCwgYGF1dGhvcl9pZGAsIGBjcmVhdGlvbl9kYXRlYCwgYGNyZWF0aW9uX2RhdGVfZ210YCkgVkFMVUVTICgxMTAsIDYsIDMsICcyMDA4LTAxLTIyIDE1OjI0OjUyJywgJzIwMDgtMDEtMjIgMDU6MjQ6NTInKTsNCklOU0VSVCBJTlRPIGB0YmxfZW50cmllc2AgKGBpZGAsIGBzZWN0aW9uX2lkYCwgYGF1dGhvcl9pZGAsIGBjcmVhdGlvbl9kYXRlYCwgYGNyZWF0aW9uX2RhdGVfZ210YCkgVkFMVUVTICgxMTQsIDgsIDMsICcyMDA4LTAxLTIyIDE3OjAwOjI5JywgJzIwMDgtMDEtMjIgMDc6MDA6MjknKTsNCklOU0VSVCBJTlRPIGB0YmxfZW50cmllc2AgKGBpZGAsIGBzZWN0aW9uX2lkYCwgYGF1dGhvcl9pZGAsIGBjcmVhdGlvbl9kYXRlYCwgYGNyZWF0aW9uX2RhdGVfZ210YCkgVkFMVUVTICgxMDksIDYsIDMsICcyMDA4LTAxLTIyIDE1OjA1OjAzJywgJzIwMDgtMDEtMjIgMDU6MDU6MDMnKTsNCklOU0VSVCBJTlRPIGB0YmxfZW50cmllc2AgKGBpZGAsIGBzZWN0aW9uX2lkYCwgYGF1dGhvcl9pZGAsIGBjcmVhdGlvbl9kYXRlYCwgYGNyZWF0aW9uX2RhdGVfZ210YCkgVkFMVUVTICgxMDUsIDExLCAwLCAnMjAwOC0wMi0wMSAxMTowNTo0MScsICcyMDA4LTAyLTAxIDAxOjA1OjQxJyk7DQoNCi0tICoqKiBEQVRBOiBgdGJsX2V4dGVuc2lvbnNgICoqKg0KSU5TRVJUIElOVE8gYHRibF9leHRlbnNpb25zYCAoYGlkYCwgYG5hbWVgLCBgc3RhdHVzYCwgYHZlcnNpb25gKSBWQUxVRVMgKDU2LCAnbWFya2Rvd24nLCAnZW5hYmxlZCcsIDEuOCk7DQpJTlNFUlQgSU5UTyBgdGJsX2V4dGVuc2lvbnNgIChgaWRgLCBgbmFtZWAsIGBzdGF0dXNgLCBgdmVyc2lvbmApIFZBTFVFUyAoNTUsICdtYWludGVuYW5jZV9tb2RlJywgJ2VuYWJsZWQnLCAxLjEpOw0KSU5TRVJUIElOVE8gYHRibF9leHRlbnNpb25zYCAoYGlkYCwgYG5hbWVgLCBgc3RhdHVzYCwgYHZlcnNpb25gKSBWQUxVRVMgKDU3LCAnc2VsZWN0Ym94X2xpbmtfZmllbGQnLCAnZW5hYmxlZCcsIDEuOSk7DQpJTlNFUlQgSU5UTyBgdGJsX2V4dGVuc2lvbnNgIChgaWRgLCBgbmFtZWAsIGBzdGF0dXNgLCBgdmVyc2lvbmApIFZBTFVFUyAoNjEsICdleHBvcnRfZW5zZW1ibGUnLCAnZW5hYmxlZCcsIDEuNSk7DQpJTlNFUlQgSU5UTyBgdGJsX2V4dGVuc2lvbnNgIChgaWRgLCBgbmFtZWAsIGBzdGF0dXNgLCBgdmVyc2lvbmApIFZBTFVFUyAoNjAsICdqaXRfaW1hZ2VfbWFuaXB1bGF0aW9uJywgJ2VuYWJsZWQnLCAxLjAyKTsNCg0KLS0gKioqIERBVEE6IGB0YmxfZXh0ZW5zaW9uc19kZWxlZ2F0ZXNgICoqKg0KSU5TRVJUIElOVE8gYHRibF9leHRlbnNpb25zX2RlbGVnYXRlc2AgKGBpZGAsIGBleHRlbnNpb25faWRgLCBgcGFnZWAsIGBkZWxlZ2F0ZWAsIGBjYWxsYmFja2ApIFZBTFVFUyAoMzQsIDU1LCAnL2JhY2tlbmQvJywgJ0FwcGVuZFBhZ2VBbGVydCcsICdfX2FwcGVuZEFsZXJ0Jyk7DQpJTlNFUlQgSU5UTyBgdGJsX2V4dGVuc2lvbnNfZGVsZWdhdGVzYCAoYGlkYCwgYGV4dGVuc2lvbl9pZGAsIGBwYWdlYCwgYGRlbGVnYXRlYCwgYGNhbGxiYWNrYCkgVkFMVUVTICgzMywgNTUsICcvZnJvbnRlbmQvJywgJ0Zyb250ZW5kUGFyYW1zUmVzb2x2ZScsICdfX2FkZFBhcmFtJyk7DQpJTlNFUlQgSU5UTyBgdGJsX2V4dGVuc2lvbnNfZGVsZWdhdGVzYCAoYGlkYCwgYGV4dGVuc2lvbl9pZGAsIGBwYWdlYCwgYGRlbGVnYXRlYCwgYGNhbGxiYWNrYCkgVkFMVUVTICgyOSwgNTUsICcvc3lzdGVtL3ByZWZlcmVuY2VzLycsICdBZGRDdXN0b21QcmVmZXJlbmNlRmllbGRzZXRzJywgJ2FwcGVuZFByZWZlcmVuY2VzJyk7DQpJTlNFUlQgSU5UTyBgdGJsX2V4dGVuc2lvbnNfZGVsZWdhdGVzYCAoYGlkYCwgYGV4dGVuc2lvbl9pZGAsIGBwYWdlYCwgYGRlbGVnYXRlYCwgYGNhbGxiYWNrYCkgVkFMVUVTICgzMiwgNTUsICcvZnJvbnRlbmQvJywgJ0Zyb250ZW5kUHJlUGFnZVJlc29sdmUnLCAnX19jaGVja0Zvck1haW50ZW5hbmNlTW9kZScpOw0KSU5TRVJUIElOVE8gYHRibF9leHRlbnNpb25zX2RlbGVnYXRlc2AgKGBpZGAsIGBleHRlbnNpb25faWRgLCBgcGFnZWAsIGBkZWxlZ2F0ZWAsIGBjYWxsYmFja2ApIFZBTFVFUyAoMzEsIDU1LCAnL3N5c3RlbS9wcmVmZXJlbmNlcy8nLCAnQ3VzdG9tQWN0aW9ucycsICdfX3RvZ2dsZU1haW50ZW5hbmNlTW9kZScpOw0KSU5TRVJUIElOVE8gYHRibF9leHRlbnNpb25zX2RlbGVnYXRlc2AgKGBpZGAsIGBleHRlbnNpb25faWRgLCBgcGFnZWAsIGBkZWxlZ2F0ZWAsIGBjYWxsYmFja2ApIFZBTFVFUyAoMzAsIDU1LCAnL3N5c3RlbS9wcmVmZXJlbmNlcy8nLCAnU2F2ZScsICdfX1NhdmVQcmVmZXJlbmNlcycpOw0KSU5TRVJUIElOVE8gYHRibF9leHRlbnNpb25zX2RlbGVnYXRlc2AgKGBpZGAsIGBleHRlbnNpb25faWRgLCBgcGFnZWAsIGBkZWxlZ2F0ZWAsIGBjYWxsYmFja2ApIFZBTFVFUyAoNDEsIDYxLCAnL3N5c3RlbS9wcmVmZXJlbmNlcy8nLCAnQWRkQ3VzdG9tUHJlZmVyZW5jZUZpZWxkc2V0cycsICdhcHBlbmRQcmVmZXJlbmNlcycpOw0KSU5TRVJUIElOVE8gYHRibF9leHRlbnNpb25zX2RlbGVnYXRlc2AgKGBpZGAsIGBleHRlbnNpb25faWRgLCBgcGFnZWAsIGBkZWxlZ2F0ZWAsIGBjYWxsYmFja2ApIFZBTFVFUyAoNDAsIDYwLCAnL3N5c3RlbS9wcmVmZXJlbmNlcy8nLCAnU2F2ZScsICdfX1NhdmVQcmVmZXJlbmNlcycpOw0KSU5TRVJUIElOVE8gYHRibF9leHRlbnNpb25zX2RlbGVnYXRlc2AgKGBpZGAsIGBleHRlbnNpb25faWRgLCBgcGFnZWAsIGBkZWxlZ2F0ZWAsIGBjYWxsYmFja2ApIFZBTFVFUyAoMzksIDYwLCAnL3N5c3RlbS9wcmVmZXJlbmNlcy8nLCAnQWRkQ3VzdG9tUHJlZmVyZW5jZUZpZWxkc2V0cycsICdhcHBlbmRQcmVmZXJlbmNlcycpOw0KDQotLSAqKiogREFUQTogYHRibF9maWVsZHNgICoqKg0KSU5TRVJUIElOVE8gYHRibF9maWVsZHNgIChgaWRgLCBgbGFiZWxgLCBgZWxlbWVudF9uYW1lYCwgYHR5cGVgLCBgcGFyZW50X3NlY3Rpb25gLCBgcmVxdWlyZWRgLCBgc29ydG9yZGVyYCwgYGxvY2F0aW9uYCwgYHNob3dfY29sdW1uYCkgVkFMVUVTICgzOSwgJ0FydGljbGUnLCAnYXJ0aWNsZScsICdzZWxlY3Rib3hfbGluaycsIDksICd5ZXMnLCAxMywgJ3NpZGViYXInLCAneWVzJyk7DQpJTlNFUlQgSU5UTyBgdGJsX2ZpZWxkc2AgKGBpZGAsIGBsYWJlbGAsIGBlbGVtZW50X25hbWVgLCBgdHlwZWAsIGBwYXJlbnRfc2VjdGlvbmAsIGByZXF1aXJlZGAsIGBzb3J0b3JkZXJgLCBgbG9jYXRpb25gLCBgc2hvd19jb2x1bW5gKSBWQUxVRVMgKDM4LCAnV2Vic2l0ZScsICd3ZWJzaXRlJywgJ2lucHV0JywgOSwgJ25vJywgOCwgJ21haW4nLCAneWVzJyk7DQpJTlNFUlQgSU5UTyBgdGJsX2ZpZWxkc2AgKGBpZGAsIGBsYWJlbGAsIGBlbGVtZW50X25hbWVgLCBgdHlwZWAsIGBwYXJlbnRfc2VjdGlvbmAsIGByZXF1aXJlZGAsIGBzb3J0b3JkZXJgLCBgbG9jYXRpb25gLCBgc2hvd19jb2x1bW5gKSBWQUxVRVMgKDM3LCAnRW1haWwnLCAnZW1haWwnLCAnaW5wdXQnLCA5LCAneWVzJywgNCwgJ21haW4nLCAneWVzJyk7DQpJTlNFUlQgSU5UTyBgdGJsX2ZpZWxkc2AgKGBpZGAsIGBsYWJlbGAsIGBlbGVtZW50X25hbWVgLCBgdHlwZWAsIGBwYXJlbnRfc2VjdGlvbmAsIGByZXF1aXJlZGAsIGBzb3J0b3JkZXJgLCBgbG9jYXRpb25gLCBgc2hvd19jb2x1bW5gKSBWQUxVRVMgKDM0LCAnTm90ZScsICdub3RlJywgJ3RleHRhcmVhJywgOCwgJ3llcycsIDEsICdtYWluJywgJ3llcycpOw0KSU5TRVJUIElOVE8gYHRibF9maWVsZHNgIChgaWRgLCBgbGFiZWxgLCBgZWxlbWVudF9uYW1lYCwgYHR5cGVgLCBgcGFyZW50X3NlY3Rpb25gLCBgcmVxdWlyZWRgLCBgc29ydG9yZGVyYCwgYGxvY2F0aW9uYCwgYHNob3dfY29sdW1uYCkgVkFMVUVTICgzNiwgJ0F1dGhvcicsICdhdXRob3InLCAnaW5wdXQnLCA5LCAneWVzJywgMCwgJ21haW4nLCAneWVzJyk7DQpJTlNFUlQgSU5UTyBgdGJsX2ZpZWxkc2AgKGBpZGAsIGBsYWJlbGAsIGBlbGVtZW50X25hbWVgLCBgdHlwZWAsIGBwYXJlbnRfc2VjdGlvbmAsIGByZXF1aXJlZGAsIGBzb3J0b3JkZXJgLCBgbG9jYXRpb25gLCBgc2hvd19jb2x1bW5gKSBWQUxVRVMgKDU2LCAnQ2F0ZWdvcmllcycsICdjYXRlZ29yaWVzJywgJ3NlbGVjdGJveF9saW5rJywgNiwgJ3llcycsIDYsICdzaWRlYmFyJywgJ3llcycpOw0KSU5TRVJUIElOVE8gYHRibF9maWVsZHNgIChgaWRgLCBgbGFiZWxgLCBgZWxlbWVudF9uYW1lYCwgYHR5cGVgLCBgcGFyZW50X3NlY3Rpb25gLCBgcmVxdWlyZWRgLCBgc29ydG9yZGVyYCwgYGxvY2F0aW9uYCwgYHNob3dfY29sdW1uYCkgVkFMVUVTICgzNSwgJ0Rlc2NyaXB0aW9uJywgJ2Rlc2NyaXB0aW9uJywgJ3RleHRhcmVhJywgNywgJ25vJywgNCwgJ21haW4nLCAneWVzJyk7DQpJTlNFUlQgSU5UTyBgdGJsX2ZpZWxkc2AgKGBpZGAsIGBsYWJlbGAsIGBlbGVtZW50X25hbWVgLCBgdHlwZWAsIGBwYXJlbnRfc2VjdGlvbmAsIGByZXF1aXJlZGAsIGBzb3J0b3JkZXJgLCBgbG9jYXRpb25gLCBgc2hvd19jb2x1bW5gKSBWQUxVRVMgKDMxLCAnVGl0bGUnLCAndGl0bGUnLCAnaW5wdXQnLCA3LCAneWVzJywgMCwgJ21haW4nLCAneWVzJyk7DQpJTlNFUlQgSU5UTyBgdGJsX2ZpZWxkc2AgKGBpZGAsIGBsYWJlbGAsIGBlbGVtZW50X25hbWVgLCBgdHlwZWAsIGBwYXJlbnRfc2VjdGlvbmAsIGByZXF1aXJlZGAsIGBzb3J0b3JkZXJgLCBgbG9jYXRpb25gLCBgc2hvd19jb2x1bW5gKSBWQUxVRVMgKDMwLCAnUHVibGlzaCcsICdwdWJsaXNoJywgJ2NoZWNrYm94JywgNiwgJ25vJywgNywgJ3NpZGViYXInLCAneWVzJyk7DQpJTlNFUlQgSU5UTyBgdGJsX2ZpZWxkc2AgKGBpZGAsIGBsYWJlbGAsIGBlbGVtZW50X25hbWVgLCBgdHlwZWAsIGBwYXJlbnRfc2VjdGlvbmAsIGByZXF1aXJlZGAsIGBzb3J0b3JkZXJgLCBgbG9jYXRpb25gLCBgc2hvd19jb2x1bW5gKSBWQUxVRVMgKDI2LCAnVGl0bGUnLCAndGl0bGUnLCAnaW5wdXQnLCA2LCAneWVzJywgMCwgJ21haW4nLCAneWVzJyk7DQpJTlNFUlQgSU5UTyBgdGJsX2ZpZWxkc2AgKGBpZGAsIGBsYWJlbGAsIGBlbGVtZW50X25hbWVgLCBgdHlwZWAsIGBwYXJlbnRfc2VjdGlvbmAsIGByZXF1aXJlZGAsIGBzb3J0b3JkZXJgLCBgbG9jYXRpb25gLCBgc2hvd19jb2x1bW5gKSBWQUxVRVMgKDI3LCAnQm9keScsICdib2R5JywgJ3RleHRhcmVhJywgNiwgJ3llcycsIDQsICdtYWluJywgJ25vJyk7DQpJTlNFUlQgSU5UTyBgdGJsX2ZpZWxkc2AgKGBpZGAsIGBsYWJlbGAsIGBlbGVtZW50X25hbWVgLCBgdHlwZWAsIGBwYXJlbnRfc2VjdGlvbmAsIGByZXF1aXJlZGAsIGBzb3J0b3JkZXJgLCBgbG9jYXRpb25gLCBgc2hvd19jb2x1bW5gKSBWQUxVRVMgKDQ2LCAnQXV0aG9yaXNlZCcsICdhdXRob3Jpc2VkJywgJ2NoZWNrYm94JywgOSwgJ25vJywgMTUsICdzaWRlYmFyJywgJ25vJyk7DQpJTlNFUlQgSU5UTyBgdGJsX2ZpZWxkc2AgKGBpZGAsIGBsYWJlbGAsIGBlbGVtZW50X25hbWVgLCBgdHlwZWAsIGBwYXJlbnRfc2VjdGlvbmAsIGByZXF1aXJlZGAsIGBzb3J0b3JkZXJgLCBgbG9jYXRpb25gLCBgc2hvd19jb2x1bW5gKSBWQUxVRVMgKDI5LCAnRGF0ZScsICdkYXRlJywgJ2RhdGUnLCA2LCAnbm8nLCA1LCAnc2lkZWJhcicsICd5ZXMnKTsNCklOU0VSVCBJTlRPIGB0YmxfZmllbGRzYCAoYGlkYCwgYGxhYmVsYCwgYGVsZW1lbnRfbmFtZWAsIGB0eXBlYCwgYHBhcmVudF9zZWN0aW9uYCwgYHJlcXVpcmVkYCwgYHNvcnRvcmRlcmAsIGBsb2NhdGlvbmAsIGBzaG93X2NvbHVtbmApIFZBTFVFUyAoNDcsICdOYW1lJywgJ25hbWUnLCAnaW5wdXQnLCAxMSwgJ3llcycsIDAsICdtYWluJywgJ3llcycpOw0KSU5TRVJUIElOVE8gYHRibF9maWVsZHNgIChgaWRgLCBgbGFiZWxgLCBgZWxlbWVudF9uYW1lYCwgYHR5cGVgLCBgcGFyZW50X3NlY3Rpb25gLCBgcmVxdWlyZWRgLCBgc29ydG9yZGVyYCwgYGxvY2F0aW9uYCwgYHNob3dfY29sdW1uYCkgVkFMVUVTICg0MCwgJ0NvbW1lbnQnLCAnY29tbWVudCcsICd0ZXh0YXJlYScsIDksICd5ZXMnLCAxNCwgJ3NpZGViYXInLCAnbm8nKTsNCklOU0VSVCBJTlRPIGB0YmxfZmllbGRzYCAoYGlkYCwgYGxhYmVsYCwgYGVsZW1lbnRfbmFtZWAsIGB0eXBlYCwgYHBhcmVudF9zZWN0aW9uYCwgYHJlcXVpcmVkYCwgYHNvcnRvcmRlcmAsIGBsb2NhdGlvbmAsIGBzaG93X2NvbHVtbmApIFZBTFVFUyAoNDMsICdJbWFnZScsICdpbWFnZScsICd1cGxvYWQnLCAxMCwgJ3llcycsIDAsICdtYWluJywgJ3llcycpOw0KSU5TRVJUIElOVE8gYHRibF9maWVsZHNgIChgaWRgLCBgbGFiZWxgLCBgZWxlbWVudF9uYW1lYCwgYHR5cGVgLCBgcGFyZW50X3NlY3Rpb25gLCBgcmVxdWlyZWRgLCBgc29ydG9yZGVyYCwgYGxvY2F0aW9uYCwgYHNob3dfY29sdW1uYCkgVkFMVUVTICg0NSwgJ0FydGljbGUnLCAnYXJ0aWNsZScsICdzZWxlY3Rib3hfbGluaycsIDEwLCAneWVzJywgMywgJ21haW4nLCAneWVzJyk7DQpJTlNFUlQgSU5UTyBgdGJsX2ZpZWxkc2AgKGBpZGAsIGBsYWJlbGAsIGBlbGVtZW50X25hbWVgLCBgdHlwZWAsIGBwYXJlbnRfc2VjdGlvbmAsIGByZXF1aXJlZGAsIGBzb3J0b3JkZXJgLCBgbG9jYXRpb25gLCBgc2hvd19jb2x1bW5gKSBWQUxVRVMgKDQ0LCAnRGVzY3JpcHRpb24nLCAnZGVzY3JpcHRpb24nLCAndGV4dGFyZWEnLCAxMCwgJ25vJywgNCwgJ3NpZGViYXInLCAnbm8nKTsNCklOU0VSVCBJTlRPIGB0YmxfZmllbGRzYCAoYGlkYCwgYGxhYmVsYCwgYGVsZW1lbnRfbmFtZWAsIGB0eXBlYCwgYHBhcmVudF9zZWN0aW9uYCwgYHJlcXVpcmVkYCwgYHNvcnRvcmRlcmAsIGBsb2NhdGlvbmAsIGBzaG93X2NvbHVtbmApIFZBTFVFUyAoNTEsICdEYXRlJywgJ2RhdGUnLCAnZGF0ZScsIDgsICdubycsIDAsICdtYWluJywgJ3llcycpOw0KSU5TRVJUIElOVE8gYHRibF9maWVsZHNgIChgaWRgLCBgbGFiZWxgLCBgZWxlbWVudF9uYW1lYCwgYHR5cGVgLCBgcGFyZW50X3NlY3Rpb25gLCBgcmVxdWlyZWRgLCBgc29ydG9yZGVyYCwgYGxvY2F0aW9uYCwgYHNob3dfY29sdW1uYCkgVkFMVUVTICg0OCwgJ0VtYWlsJywgJ2VtYWlsJywgJ2lucHV0JywgMTEsICd5ZXMnLCA0LCAnbWFpbicsICd5ZXMnKTsNCklOU0VSVCBJTlRPIGB0YmxfZmllbGRzYCAoYGlkYCwgYGxhYmVsYCwgYGVsZW1lbnRfbmFtZWAsIGB0eXBlYCwgYHBhcmVudF9zZWN0aW9uYCwgYHJlcXVpcmVkYCwgYHNvcnRvcmRlcmAsIGBsb2NhdGlvbmAsIGBzaG93X2NvbHVtbmApIFZBTFVFUyAoNDksICdTdWJqZWN0JywgJ3N1YmplY3QnLCAnaW5wdXQnLCAxMSwgJ25vJywgOCwgJ21haW4nLCAneWVzJyk7DQpJTlNFUlQgSU5UTyBgdGJsX2ZpZWxkc2AgKGBpZGAsIGBsYWJlbGAsIGBlbGVtZW50X25hbWVgLCBgdHlwZWAsIGBwYXJlbnRfc2VjdGlvbmAsIGByZXF1aXJlZGAsIGBzb3J0b3JkZXJgLCBgbG9jYXRpb25gLCBgc2hvd19jb2x1bW5gKSBWQUxVRVMgKDUwLCAnTWVzc2FnZScsICdtZXNzYWdlJywgJ3RleHRhcmVhJywgMTEsICdubycsIDEyLCAnc2lkZWJhcicsICdubycpOw0KSU5TRVJUIElOVE8gYHRibF9maWVsZHNgIChgaWRgLCBgbGFiZWxgLCBgZWxlbWVudF9uYW1lYCwgYHR5cGVgLCBgcGFyZW50X3NlY3Rpb25gLCBgcmVxdWlyZWRgLCBgc29ydG9yZGVyYCwgYGxvY2F0aW9uYCwgYHNob3dfY29sdW1uYCkgVkFMVUVTICg1NCwgJ0RhdGUnLCAnZGF0ZScsICdkYXRlJywgOSwgJ25vJywgMTIsICdtYWluJywgJ3llcycpOw0KDQotLSAqKiogREFUQTogYHRibF9wYWdlc2AgKioqDQpJTlNFUlQgSU5UTyBgdGJsX3BhZ2VzYCAoYGlkYCwgYHBhcmVudGAsIGB0aXRsZWAsIGBoYW5kbGVgLCBgcGF0aGAsIGBwYXJhbXNgLCBgZGF0YV9zb3VyY2VzYCwgYGV2ZW50c2AsIGBzb3J0b3JkZXJgKSBWQUxVRVMgKDY0LCBOVUxMLCAnSG9tZScsICdob21lJywgTlVMTCwgJ2NhdGVnb3J5JywgJ2FydGljbGVfaW1hZ2VzLGhvbWVwYWdlX2FydGljbGUsbmF2aWdhdGlvbixub3RlcycsICdsb2dpbicsIDApOw0KSU5TRVJUIElOVE8gYHRibF9wYWdlc2AgKGBpZGAsIGBwYXJlbnRgLCBgdGl0bGVgLCBgaGFuZGxlYCwgYHBhdGhgLCBgcGFyYW1zYCwgYGRhdGFfc291cmNlc2AsIGBldmVudHNgLCBgc29ydG9yZGVyYCkgVkFMVUVTICg2NiwgTlVMTCwgJ0Fib3V0JywgJ2Fib3V0JywgTlVMTCwgTlVMTCwgJ25hdmlnYXRpb24sd2Vic2l0ZV9vd25lcicsICdsb2dpbixzYXZlX21lc3NhZ2UnLCA0KTsNCklOU0VSVCBJTlRPIGB0YmxfcGFnZXNgIChgaWRgLCBgcGFyZW50YCwgYHRpdGxlYCwgYGhhbmRsZWAsIGBwYXRoYCwgYHBhcmFtc2AsIGBkYXRhX3NvdXJjZXNgLCBgZXZlbnRzYCwgYHNvcnRvcmRlcmApIFZBTFVFUyAoNjcsIE5VTEwsICdSU1MnLCAncnNzJywgTlVMTCwgTlVMTCwgJ3Jzc19hcnRpY2xlcycsIE5VTEwsIDUpOw0KSU5TRVJUIElOVE8gYHRibF9wYWdlc2AgKGBpZGAsIGBwYXJlbnRgLCBgdGl0bGVgLCBgaGFuZGxlYCwgYHBhdGhgLCBgcGFyYW1zYCwgYGRhdGFfc291cmNlc2AsIGBldmVudHNgLCBgc29ydG9yZGVyYCkgVkFMVUVTICg2OCwgTlVMTCwgJ0FyY2hpdmUnLCAnYXJjaGl2ZScsIE5VTEwsICd5ZWFyJywgJ2FyY2hpdmUsbmF2aWdhdGlvbicsICdsb2dpbicsIDMpOw0KSU5TRVJUIElOVE8gYHRibF9wYWdlc2AgKGBpZGAsIGBwYXJlbnRgLCBgdGl0bGVgLCBgaGFuZGxlYCwgYHBhdGhgLCBgcGFyYW1zYCwgYGRhdGFfc291cmNlc2AsIGBldmVudHNgLCBgc29ydG9yZGVyYCkgVkFMVUVTICg2OSwgTlVMTCwgJ0FydGljbGVzJywgJ2FydGljbGVzJywgTlVMTCwgJ2VudHJ5L2NhdCcsICdhcnRpY2xlX2ltYWdlcyxhcnRpY2xlcyxjb21tZW50cyxuYXZpZ2F0aW9uJywgJ2xvZ2luLHNhdmVfY29tbWVudCcsIDEpOw0KSU5TRVJUIElOVE8gYHRibF9wYWdlc2AgKGBpZGAsIGBwYXJlbnRgLCBgdGl0bGVgLCBgaGFuZGxlYCwgYHBhdGhgLCBgcGFyYW1zYCwgYGRhdGFfc291cmNlc2AsIGBldmVudHNgLCBgc29ydG9yZGVyYCkgVkFMVUVTICg3MCwgTlVMTCwgJ0RyYWZ0cycsICdkcmFmdHMnLCBOVUxMLCAnZW50cnknLCAnYXJ0aWNsZV9pbWFnZXMsZHJhZnRzLG5hdmlnYXRpb24nLCAnbG9naW4scHVibGlzaF9hcnRpY2xlJywgMik7DQpJTlNFUlQgSU5UTyBgdGJsX3BhZ2VzYCAoYGlkYCwgYHBhcmVudGAsIGB0aXRsZWAsIGBoYW5kbGVgLCBgcGF0aGAsIGBwYXJhbXNgLCBgZGF0YV9zb3VyY2VzYCwgYGV2ZW50c2AsIGBzb3J0b3JkZXJgKSBWQUxVRVMgKDc1LCBOVUxMLCAnTWFpbnRlbmFuY2UnLCAnbWFpbnRlbmFuY2UnLCBOVUxMLCBOVUxMLCBOVUxMLCBOVUxMLCA2KTsNCklOU0VSVCBJTlRPIGB0YmxfcGFnZXNgIChgaWRgLCBgcGFyZW50YCwgYHRpdGxlYCwgYGhhbmRsZWAsIGBwYXRoYCwgYHBhcmFtc2AsIGBkYXRhX3NvdXJjZXNgLCBgZXZlbnRzYCwgYHNvcnRvcmRlcmApIFZBTFVFUyAoNzYsIE5VTEwsICc0MDQ6IFBhZ2UgTm90IEZvdW5kJywgJzQwNC1wYWdlLW5vdC1mb3VuZCcsIE5VTEwsIE5VTEwsIE5VTEwsIE5VTEwsIDcpOw0KDQotLSAqKiogREFUQTogYHRibF9wYWdlc190eXBlc2AgKioqDQpJTlNFUlQgSU5UTyBgdGJsX3BhZ2VzX3R5cGVzYCAoYGlkYCwgYHBhZ2VfaWRgLCBgdHlwZWApIFZBTFVFUyAoNTkzLCA3NiwgJ2hpZGRlbicpOw0KSU5TRVJUIElOVE8gYHRibF9wYWdlc190eXBlc2AgKGBpZGAsIGBwYWdlX2lkYCwgYHR5cGVgKSBWQUxVRVMgKDU0MiwgNzAsICdhZG1pbicpOw0KSU5TRVJUIElOVE8gYHRibF9wYWdlc190eXBlc2AgKGBpZGAsIGBwYWdlX2lkYCwgYHR5cGVgKSBWQUxVRVMgKDU3NywgNzUsICdoaWRkZW4nKTsNCklOU0VSVCBJTlRPIGB0YmxfcGFnZXNfdHlwZXNgIChgaWRgLCBgcGFnZV9pZGAsIGB0eXBlYCkgVkFMVUVTICg1ODksIDY0LCAnaW5kZXgnKTsNCklOU0VSVCBJTlRPIGB0YmxfcGFnZXNfdHlwZXNgIChgaWRgLCBgcGFnZV9pZGAsIGB0eXBlYCkgVkFMVUVTICg1OTQsIDY5LCAnaGlkZGVuJyk7DQpJTlNFUlQgSU5UTyBgdGJsX3BhZ2VzX3R5cGVzYCAoYGlkYCwgYHBhZ2VfaWRgLCBgdHlwZWApIFZBTFVFUyAoNDYzLCA2NywgJ1hNTCcpOw0KSU5TRVJUIElOVE8gYHRibF9wYWdlc190eXBlc2AgKGBpZGAsIGBwYWdlX2lkYCwgYHR5cGVgKSBWQUxVRVMgKDQ2MiwgNjcsICdoaWRkZW4nKTsNCklOU0VSVCBJTlRPIGB0YmxfcGFnZXNfdHlwZXNgIChgaWRgLCBgcGFnZV9pZGAsIGB0eXBlYCkgVkFMVUVTICg1ODgsIDY0LCAnaGlkZGVuJyk7DQpJTlNFUlQgSU5UTyBgdGJsX3BhZ2VzX3R5cGVzYCAoYGlkYCwgYHBhZ2VfaWRgLCBgdHlwZWApIFZBTFVFUyAoNTc4LCA3NSwgJ21haW50ZW5hbmNlJyk7DQpJTlNFUlQgSU5UTyBgdGJsX3BhZ2VzX3R5cGVzYCAoYGlkYCwgYHBhZ2VfaWRgLCBgdHlwZWApIFZBTFVFUyAoNTkyLCA3NiwgNDA0KTsNCg0KLS0gKioqIERBVEE6IGB0Ymxfc2VjdGlvbnNgICoqKg0KSU5TRVJUIElOVE8gYHRibF9zZWN0aW9uc2AgKGBpZGAsIGBuYW1lYCwgYGhhbmRsZWAsIGBzb3J0b3JkZXJgLCBgZW50cnlfb3JkZXJgLCBgZW50cnlfb3JkZXJfZGlyZWN0aW9uYCwgYGhpZGRlbmApIFZBTFVFUyAoMTAsICdJbWFnZXMnLCAnaW1hZ2VzJywgNSwgTlVMTCwgJ2FzYycsICd5ZXMnKTsNCklOU0VSVCBJTlRPIGB0Ymxfc2VjdGlvbnNgIChgaWRgLCBgbmFtZWAsIGBoYW5kbGVgLCBgc29ydG9yZGVyYCwgYGVudHJ5X29yZGVyYCwgYGVudHJ5X29yZGVyX2RpcmVjdGlvbmAsIGBoaWRkZW5gKSBWQUxVRVMgKDksICdDb21tZW50cycsICdjb21tZW50cycsIDEsIE5VTEwsIE5VTEwsICdubycpOw0KSU5TRVJUIElOVE8gYHRibF9zZWN0aW9uc2AgKGBpZGAsIGBuYW1lYCwgYGhhbmRsZWAsIGBzb3J0b3JkZXJgLCBgZW50cnlfb3JkZXJgLCBgZW50cnlfb3JkZXJfZGlyZWN0aW9uYCwgYGhpZGRlbmApIFZBTFVFUyAoOCwgJ05vdGVzJywgJ25vdGVzJywgMiwgNTEsICdkZXNjJywgJ25vJyk7DQpJTlNFUlQgSU5UTyBgdGJsX3NlY3Rpb25zYCAoYGlkYCwgYG5hbWVgLCBgaGFuZGxlYCwgYHNvcnRvcmRlcmAsIGBlbnRyeV9vcmRlcmAsIGBlbnRyeV9vcmRlcl9kaXJlY3Rpb25gLCBgaGlkZGVuYCkgVkFMVUVTICg2LCAnQXJ0aWNsZXMnLCAnYXJ0aWNsZXMnLCAwLCAyOSwgJ2Rlc2MnLCAnbm8nKTsNCklOU0VSVCBJTlRPIGB0Ymxfc2VjdGlvbnNgIChgaWRgLCBgbmFtZWAsIGBoYW5kbGVgLCBgc29ydG9yZGVyYCwgYGVudHJ5X29yZGVyYCwgYGVudHJ5X29yZGVyX2RpcmVjdGlvbmAsIGBoaWRkZW5gKSBWQUxVRVMgKDcsICdDYXRlZ29yaWVzJywgJ2NhdGVnb3JpZXMnLCAzLCAzMSwgJ2FzYycsICdubycpOw0KSU5TRVJUIElOVE8gYHRibF9zZWN0aW9uc2AgKGBpZGAsIGBuYW1lYCwgYGhhbmRsZWAsIGBzb3J0b3JkZXJgLCBgZW50cnlfb3JkZXJgLCBgZW50cnlfb3JkZXJfZGlyZWN0aW9uYCwgYGhpZGRlbmApIFZBTFVFUyAoMTEsICdNZXNzYWdlcycsICdtZXNzYWdlcycsIDQsIE5VTEwsICdhc2MnLCAnbm8nKTsNCg0KLS0gKioqIERBVEE6IGB0Ymxfc2VjdGlvbnNfYXNzb2NpYXRpb25gICoqKg0KSU5TRVJUIElOVE8gYHRibF9zZWN0aW9uc19hc3NvY2lhdGlvbmAgKGBpZGAsIGBwYXJlbnRfc2VjdGlvbl9pZGAsIGBwYXJlbnRfc2VjdGlvbl9maWVsZF9pZGAsIGBjaGlsZF9zZWN0aW9uX2lkYCwgYGNoaWxkX3NlY3Rpb25fZmllbGRfaWRgLCBgY2FzY2FkaW5nX2RlbGV0aW9uYCkgVkFMVUVTICg2NywgNiwgMjYsIDksIDM5LCAnbm8nKTsNCklOU0VSVCBJTlRPIGB0Ymxfc2VjdGlvbnNfYXNzb2NpYXRpb25gIChgaWRgLCBgcGFyZW50X3NlY3Rpb25faWRgLCBgcGFyZW50X3NlY3Rpb25fZmllbGRfaWRgLCBgY2hpbGRfc2VjdGlvbl9pZGAsIGBjaGlsZF9zZWN0aW9uX2ZpZWxkX2lkYCwgYGNhc2NhZGluZ19kZWxldGlvbmApIFZBTFVFUyAoNzUsIDYsIDI2LCAxMCwgNDUsICdubycpOw0KSU5TRVJUIElOVE8gYHRibF9zZWN0aW9uc19hc3NvY2lhdGlvbmAgKGBpZGAsIGBwYXJlbnRfc2VjdGlvbl9pZGAsIGBwYXJlbnRfc2VjdGlvbl9maWVsZF9pZGAsIGBjaGlsZF9zZWN0aW9uX2lkYCwgYGNoaWxkX3NlY3Rpb25fZmllbGRfaWRgLCBgY2FzY2FkaW5nX2RlbGV0aW9uYCkgVkFMVUVTICg4MSwgNywgMzEsIDYsIDU2LCAnbm8nKTsNCg==

SQL;

		return base64_decode(trim($sql));

	}
		
	define('INSTALL_REQUIREMENTS_PASSED', true);
	include_once('./symphony/lib/toolkit/include.install.php');


?>
